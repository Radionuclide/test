<?xml version="1.0"?>
<doc>
    <assembly>
        "ibaFilesLiteDotNet"
    </assembly>
    <members>
        <member name="P:iba.ibaFilesLiteDotNet.IbaQDRMeasuringLocation.Modules">
            <summary>
Gets a list of all available modules, represented as instances of <see cref="T:iba.ibaFilesLiteDotNet.IbaModuleReader" />, that belong to the measuring location. The list is read-only.
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaQDRMeasuringLocation.IconIndex">
            <summary>
Gets the index of the measuring location icon in imagelists (System.Windows.Forms.ImageList) used in iba products.
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaQDRMeasuringLocation.Name">
            <summary>
Gets the measuring location's name
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaQDRMeasuringLocation.Id">
            <summary>
Gets the measuring location's id.
</summary>
        </member>
        <member name="T:iba.ibaFilesLiteDotNet.IbaQDRMeasuringLocation">
            <summary>
Class that corresponds with a measuring location in a QDR .dat file.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.IbaShortFileInfo.PasswordProtected">
            <summary>
True if the file is password protected.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.IbaShortFileInfo.FileIsBusy">
            <summary>
True if the file isn't finished yet.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.IbaShortFileInfo.UtcOffsetValid">
            <summary>
True if the UTC offset could be read from the file.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.IbaShortFileInfo.UtcOffset">
            <summary>
UTC offset in minutes. StartTimeUTC = StartTime - UtcOffset
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.IbaShortFileInfo.ConfigId">
            <summary>
Configuration id. Files in the same directory with the same config id should contain the same signals.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.IbaShortFileInfo.EndTime">
            <summary>
End time of the file (in local time)
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.IbaShortFileInfo.StartTime">
            <summary>
Start time of the file (in local time)
</summary>
        </member>
        <member name="T:iba.ibaFilesLiteDotNet.IbaShortFileInfo">
            <summary>
Auxiliary class which contains short information about dat file that can be read fast.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.IbaEmbeddedFileInfo.Size">
            <summary>
Size in bytes of the embedded file.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.IbaEmbeddedFileInfo.Offset">
            <summary>
Offset in bytes of the embedded file within the containing file.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.IbaEmbeddedFileInfo.Filename">
            <summary>
Filename of the embedded file.
</summary>
        </member>
        <member name="T:iba.ibaFilesLiteDotNet.IbaEmbeddedFileInfo">
            <summary>
Auxiliary class which contains information about embedded files.
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaHDChannelReader.Parent">
            <inheritdoc />
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.GetXBase(iba.ibaFilesLiteDotNet.XBaseType)">
            <inheritdoc />
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaHDChannelReader.Comment2">
            <inheritdoc />
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaHDChannelReader.Comment1">
            <inheritdoc />
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaHDChannelReader.Unit">
            <inheritdoc />
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaHDChannelReader.Name">
            <inheritdoc />
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaHDChannelReader.ChannelType">
            <inheritdoc />
            <remarks> 
The data type of a channel on the HD-server can theoretically vary over time. 
For this reason, the property will return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>Unknown</c> until an actual data query is performed unless the channel is a text channel or a digital channel.
</remarks>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaHDChannelReader.NonEquidistant">
            <inheritdoc />
            <remarks> 
The HD-server currently does not support non-equidistant analog or digital data, hence this method always returns <c>false</c> unless the channel is a text channel.
</remarks>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaHDChannelReader.Text">
            <inheritdoc />
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaHDChannelReader.Digital">
            <inheritdoc />
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaHDChannelReader.Analog">
            <inheritdoc />
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaHDChannelReader.InfoFields">
            <inheritdoc />
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.QueryNEData(System.Double[]@,System.Object@)">
            <inheritdoc />
            <summary>
Gets the non-equidistant signal data as an <see cref="T:System.Object" />.
Currently only text data is available as non-equidistant data on the HD-server, calling this method for non-text channels will result in a <see cref="T:System.NotSupportedException" />.
</summary>
            <param name="timestamps">On return, the timestamps in seconds of the sample values, relative to the start of the query range.</param>
            <param name="data">On return, the texts. The <see cref="T:System.Object" /> is an array of <see cref="T:System.String" /></param>
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server has been lost.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if this is not a text channel.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.QueryNEData(System.Double[]@,System.String[]@)">
            <inheritdoc />
            <param name="timestamps">On return, the timestamps in seconds of the sample values, relative to the start of the query range.</param>
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server has been lost.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.QueryNEData(System.Double[]@,System.Boolean[]@)">
            <summary>
This method is currently not implemented as currently no non-equidistant analog or digital data is stored on the HD-server.
</summary>
            <param name="timestamps">N/A</param>
            <param name="data">N/A</param>
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.QueryNEData(System.Double[]@,System.Int32[]@)">
            <summary>
This method is currently not implemented as currently no non-equidistant analog or digital data is stored on the HD-server.
</summary>
            <param name="timestamps">N/A</param>
            <param name="data">N/A</param>
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.QueryNEData(System.Double[]@,System.Int16[]@)">
            <summary>
This method is currently not implemented as currently no non-equidistant analog or digital data is stored on the HD-server.
</summary>
            <param name="timestamps">N/A</param>
            <param name="data">N/A</param>
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.QueryNEData(System.Double[]@,System.Double[]@)">
            <summary>
This method is currently not implemented as currently no non-equidistant analog or digital data is stored on the HD-server.
</summary>
            <param name="timestamps">N/A</param>
            <param name="data">N/A</param>
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.QueryNEData(System.Double[]@,System.Single[]@)">
            <summary>
This method is currently not implemented as currently no non-equidistant analog or digital data is stored on the HD-server.
</summary>
            <param name="timestamps">N/A</param>
            <param name="data">N/A</param>
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.QueryNEData(iba.ibaFilesLiteDotNet.XBaseType,System.Double[]@,System.Object@)">
            <inheritdoc />
            <summary>
Gets the non-equidistant signal data as an <see cref="T:System.Object" />.
Currently only text data is available as non-equidistant data on the HD-server, calling this method for non-text channels will result in a <see cref="T:System.NotSupportedException" />.
</summary>
            <param name="baseType">The domain to get the data for. Currently no other domains than <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" />.<c>TIME</c> are supported for the HD-server</param>
            <param name="timestamps">On return, the timestamps in seconds of the sample values, relative to the start of the query range.</param>
            <param name="data">On return, the texts. The <see cref="T:System.Object" /> is an array of <see cref="T:System.String" /></param>
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server has been lost.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if this is not a text channel.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.QueryNEData(iba.ibaFilesLiteDotNet.XBaseType,System.Double[]@,System.String[]@)">
            <inheritdoc />
            <param name="baseType">The domain to get the data for. Currently no other domains than <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" />.<c>TIME</c> are supported for the HD-server</param>
            <param name="timestamps">
On return, the timestamps in seconds of the sample values, relative to the start of the query range. 
</param>
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server has been lost.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.QueryNEData(iba.ibaFilesLiteDotNet.XBaseType,System.Double[]@,System.Boolean[]@)">
            <summary>
This method is currently not implemented as currently no non-equidistant analog or digital data is stored on the HD-server.
</summary>
            <param name="baseType">N/A</param>
            <param name="timestamps">N/A</param>
            <param name="data">N/A</param>
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.QueryNEData(iba.ibaFilesLiteDotNet.XBaseType,System.Double[]@,System.Int32[]@)">
            <summary>
This method is currently not implemented as currently no non-equidistant analog or digital data is stored on the HD-server.
</summary>
            <param name="baseType">N/A</param>
            <param name="timestamps">N/A</param>
            <param name="data">N/A</param>
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.QueryNEData(iba.ibaFilesLiteDotNet.XBaseType,System.Double[]@,System.Int16[]@)">
            <summary>
This method is currently not implemented as currently no non-equidistant analog or digital data is stored on the HD-server.
</summary>
            <param name="baseType">N/A</param>
            <param name="timestamps">N/A</param>
            <param name="data">N/A</param>
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.QueryNEData(iba.ibaFilesLiteDotNet.XBaseType,System.Double[]@,System.Double[]@)">
            <summary>
This method is currently not implemented as currently no non-equidistant analog or digital data is stored on the HD-server.
</summary>
            <param name="baseType">N/A</param>
            <param name="timestamps">N/A</param>
            <param name="data">N/A</param>
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.QueryNEData(iba.ibaFilesLiteDotNet.XBaseType,System.Double[]@,System.Single[]@)">
            <summary>
This method is currently not implemented as currently no non-equidistant analog or digital data is stored on the HD-server.
</summary>
            <param name="baseType">N/A</param>
            <param name="timestamps">N/A</param>
            <param name="data">N/A</param>
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.StopIncrementalRead">
            <inheritdoc />
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server has been lost.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.SkipIncrementalRead(System.Int32)">
            <inheritdoc />
            <summary>
While doing an incremental read of a channel, skip a number of samples.
<para />Incremental reading is not supported for HD-servers prior to version 1.5.4. For an HD-server prior to 1.5.4 the method will report that there is no data, 
i.e. <paramref name="numberOfSamples" /> will be zero after the first call to the method.
</summary>
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server has been lost.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.IncrementalRead(System.Int32,System.Object@)">
            <inheritdoc />
            <summary>
Read an incremental part of the signal data as an <see cref="T:System.Object" />.
<para />Incremental reading is not supported for HD-servers prior to version 1.5.4. For an HD-server prior to 1.5.4 the method will report that there is no data, 
i.e. <paramref name="numberOfSamples" /> will be zero after the first call to the method.
</summary>
            <param name="data"> On return, the signal samples as an <see cref="T:System.Object" />. The <see cref="T:System.Object" /> will be an array of values, 
</param>
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server has been lost.</exception>
            <remarks>
The <see cref="T:System.Object" /> that <paramref name="data" /> returns will be an array of <c>DataType</c>, where <c>DataType</c> is determined by the following table:
<para /><list type="table"><listheader><term>The data is internally stored on the HD-server as</term><term>Raw mode data reading (<see cref="P:iba.ibaFilesLiteDotNet.IbaHDReader.RawMode" />) is set on the parent <see cref="T:iba.ibaFilesLiteDotNet.IbaHDReader" /> instance</term><term>Raw mode data reading is not set on the parent <see cref="T:iba.ibaFilesLiteDotNet.IbaHDReader" /> instance</term></listheader><item><term><see cref="T:System.Boolean" /></term><term><see cref="T:System.Boolean" /></term><term><see cref="T:System.Single" /></term></item><item><term><see cref="T:System.Single" /></term><term><see cref="T:System.Single" /></term><term><see cref="T:System.Single" /></term></item><item><term><see cref="T:System.Double" /></term><term><see cref="T:System.Double" /></term><term><see cref="T:System.Double" /></term></item><item><term><see cref="T:System.Int16" /></term><term><see cref="T:System.Int16" /></term><term><see cref="T:System.Single" /></term></item><item><term><see cref="T:System.Int32" /></term><term><see cref="T:System.Int32" /></term><term><see cref="T:System.Double" /></term></item></list></remarks>
            <see cref="P:iba.ibaFilesLiteDotNet.IbaHDChannelReader.ChannelType" />
            <seealso cref="P:iba.ibaFilesLiteDotNet.IbaHDReader.RawMode" />
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.IncrementalRead(System.Int32,System.Boolean[]@)">
            <inheritdoc />
            <summary>
Read an incremental part of the digital signal data as an array of <see cref="T:System.Boolean" /> values.
<para />Incremental reading is not supported for HD-servers prior to version 1.5.4. For an HD-server prior to 1.5.4 the method will report that there is no data, 
i.e. <paramref name="numberOfSamples" /> will be zero after the first call to the method.
</summary>
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server has been lost.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.IncrementalRead(System.Int32,System.Int64[]@)">
            <inheritdoc />
            <summary>
Read an incremental part of the signal data as an array of <see cref="T:System.Int64" /> values.
<para />Incremental reading is not supported for HD-servers prior to version 1.5.4. For an HD-server prior to 1.5.4 the method will report that there is no data, 
i.e. <paramref name="numberOfSamples" /> will be zero after the first call to the method.
</summary>
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server has been lost.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.IncrementalRead(System.Int32,System.Int32[]@)">
            <inheritdoc />
            <summary>
Read an incremental part of the signal data as an array of <see cref="T:System.Int32" /> values.
<para />Incremental reading is not supported for HD-servers prior to version 1.5.4. For an HD-server prior to 1.5.4 the method will report that there is no data, 
i.e. <paramref name="numberOfSamples" /> will be zero after the first call to the method.
</summary>
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server has been lost.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.IncrementalRead(System.Int32,System.Int16[]@)">
            <inheritdoc />
            <summary>
Read an incremental part of the signal data as an array of <see cref="T:System.Int16" /> values.
<para />Incremental reading is not supported for HD-servers prior to version 1.5.4. For an HD-server prior to 1.5.4 the method will report that there is no data, 
i.e. <paramref name="numberOfSamples" /> will be zero after the first call to the method.
</summary>
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server has been lost.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.IncrementalRead(System.Int32,System.Double[]@)">
            <inheritdoc />
            <summary>
Read an incremental part of the signal data as an array of <see cref="T:System.Double" /> values.
<para />Incremental reading is not supported for HD-servers prior to version 1.5.4. For an HD-server prior to 1.5.4 the method will report that there is no data, 
i.e. <paramref name="numberOfSamples" /> will be zero after the first call to the method.
</summary>
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server has been lost.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.IncrementalRead(System.Int32,System.Single[]@)">
            <inheritdoc />
            <summary>
Read an incremental part of the signal data as an array of <see cref="T:System.Single" /> values.
<para />Incremental reading is not supported for HD-servers prior to version 1.5.4. For an HD-server prior to 1.5.4 the method will report that there is no data, 
i.e. <paramref name="numberOfSamples" /> will be zero after the first call to the method.
</summary>
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server has been lost.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.InitIncrementalRead(System.Single@,System.Single@)">
            <inheritdoc />
            <summary>
Initializes the instance to read signal data in increments rather than all samples at once.
<para />Incremental reading is not supported for HD-servers prior to version 1.5.4.
</summary>
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server has been lost.</exception>
            <remarks>
The parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned in seconds.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.InitIncrementalRead(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@)">
            <inheritdoc />
            <summary>
Initializes the instance to read signal data in increments rather than all samples at once.
<para />Incremental reading is not supported for HD-servers prior to version 1.5.4.
</summary>
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server has been lost.</exception>
            <remarks>
Currently no other domains than <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" />.<c>TIME</c> are supported for the HD-server,
the parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned in seconds.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.QueryData(System.Single@,System.Single@,System.Object@)">
            <inheritdoc />
            <param name="data"> On return, the signal samples as an <see cref="T:System.Object" />. The <see cref="T:System.Object" /> will be an array of values, 
</param>
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server has been lost.</exception>
            <remarks>
The parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned in seconds.
<para /><para />
The <see cref="T:System.Object" /> that <paramref name="data" /> returns will be an array of <c>DataType</c>, where <c>DataType</c> is determined by the following table:
<para /><list type="table"><listheader><term>The data is internally stored on the HD-server as</term><term>Raw mode data reading (<see cref="P:iba.ibaFilesLiteDotNet.IbaHDReader.RawMode" />) is set on the parent <see cref="T:iba.ibaFilesLiteDotNet.IbaHDReader" /> instance</term><term>Raw mode data reading is not set on the parent <see cref="T:iba.ibaFilesLiteDotNet.IbaHDReader" /> instance</term></listheader><item><term><see cref="T:System.Boolean" /></term><term><see cref="T:System.Boolean" /></term><term><see cref="T:System.Single" /></term></item><item><term><see cref="T:System.Single" /></term><term><see cref="T:System.Single" /></term><term><see cref="T:System.Single" /></term></item><item><term><see cref="T:System.Double" /></term><term><see cref="T:System.Double" /></term><term><see cref="T:System.Double" /></term></item><item><term><see cref="T:System.Int16" /></term><term><see cref="T:System.Int16" /></term><term><see cref="T:System.Single" /></term></item><item><term><see cref="T:System.Int32" /></term><term><see cref="T:System.Int32" /></term><term><see cref="T:System.Double" /></term></item></list></remarks>
            <see cref="P:iba.ibaFilesLiteDotNet.IbaHDChannelReader.ChannelType" />
            <seealso cref="P:iba.ibaFilesLiteDotNet.IbaHDReader.RawMode" />
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.QueryData(System.Single@,System.Single@,System.Int64[]@)">
            <inheritdoc />
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server has been lost.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Int64" /> values. See remarks.</exception>
            <remarks> 
The parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned in seconds.
<para /><para />The samples in the channel should be stored as 64 bit integer values, additionally raw mode data reading should have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaHDReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaHDReader.RawMode" /> should have been set to <c>true</c>.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.QueryData(System.Single@,System.Single@,System.Int32[]@)">
            <inheritdoc />
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server has been lost.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Int32" /> values. See remarks.</exception>
            <remarks> 
The parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned in seconds.
<para /><para />The samples in the channel should be stored as 32 bit integer values, additionally raw mode data reading should have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaHDReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaHDReader.RawMode" /> should have been set to <c>true</c>.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.QueryData(System.Single@,System.Single@,System.Int16[]@)">
            <inheritdoc />
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server has been lost.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Int16" /> values. See remarks.</exception>
            <remarks> 
The parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned in seconds.
<para /><para />The samples in the channel should be stored as 16 bit integer values, additionally raw mode data reading should have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaHDReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaHDReader.RawMode" /> should have been set to <c>true</c>.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.QueryData(System.Single@,System.Single@,System.Boolean[]@)">
            <inheritdoc />
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server has been lost.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Boolean" /> values. See remarks.</exception>
            <remarks> 
The parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned in seconds.
<para /><para />The signal should be digital, additionally raw mode data reading should have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaHDReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaHDReader.RawMode" /> should have been set to <c>true</c>.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.QueryData(System.Single@,System.Single@,System.Double[]@)">
            <inheritdoc />
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server has been lost.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Double" /> values. See remarks.</exception>
            <remarks> 
The parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned in seconds.
<para /><para />The samples in the channel should be stored as either:
<list type="bullet"><item><description>double precision floating point values.</description></item><item><description>32 bit integer values.
Additionally raw mode data reading should not have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaHDReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaHDReader.RawMode" /> should not have been set to <c>true</c></description></item></list></remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.QueryData(System.Single@,System.Single@,System.Single[]@)">
            <inheritdoc />
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server has been lost.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Single" /> values. See remarks.</exception>
            <remarks> 
Currently no other domains than <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" />.<c>TIME</c> are supported for the HD-server,
the parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned in seconds.
<para /><para />The samples in the channel should be stored as either:
<list type="bullet"><item><description>boolean values.
Additionally raw mode data reading should not have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaHDReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaHDReader.RawMode" /> should not have been set to <c>true</c></description></item><item><description>single precision floating point values.</description></item><item><description>16 bit integer values.
Additionally raw mode data reading should not have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaHDReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaHDReader.RawMode" /> should not have been set to <c>true</c></description></item></list>
Otherwise the method will fail by throwing a <see cref="T:System.NotSupportedException" /></remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.QueryData(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@,System.Object@)">
            <inheritdoc />
            <param name="data"> On return, the signal samples as an <see cref="T:System.Object" />. The <see cref="T:System.Object" /> will be an array of values, 
</param>
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server has been lost.</exception>
            <remarks>
Currently no other domains than <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" />.<c>TIME</c> are supported for the HD-server,
the parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned in seconds.
<para /><para />
The <see cref="T:System.Object" /> that <paramref name="data" /> returns will be an array of <c>DataType</c>, where <c>DataType</c> is determined by the following table:
<para /><list type="table"><listheader><term>The data is internally stored on the HD-server as</term><term>Raw mode data reading (<see cref="P:iba.ibaFilesLiteDotNet.IbaHDReader.RawMode" />) is set on the parent <see cref="T:iba.ibaFilesLiteDotNet.IbaHDReader" /> instance</term><term>Raw mode data reading is not set on the parent <see cref="T:iba.ibaFilesLiteDotNet.IbaHDReader" /> instance</term></listheader><item><term><see cref="T:System.Boolean" /></term><term><see cref="T:System.Boolean" /></term><term><see cref="T:System.Single" /></term></item><item><term><see cref="T:System.Single" /></term><term><see cref="T:System.Single" /></term><term><see cref="T:System.Single" /></term></item><item><term><see cref="T:System.Double" /></term><term><see cref="T:System.Double" /></term><term><see cref="T:System.Double" /></term></item><item><term><see cref="T:System.Int16" /></term><term><see cref="T:System.Int16" /></term><term><see cref="T:System.Single" /></term></item><item><term><see cref="T:System.Int32" /></term><term><see cref="T:System.Int32" /></term><term><see cref="T:System.Double" /></term></item></list></remarks>
            <see cref="P:iba.ibaFilesLiteDotNet.IbaHDChannelReader.ChannelType" />
            <seealso cref="P:iba.ibaFilesLiteDotNet.IbaHDReader.RawMode" />
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.QueryData(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@,System.Int64[]@)">
            <inheritdoc />
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server has been lost.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Int64" /> values. See remarks.</exception>
            <remarks> 
Currently no other domains than <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" />.<c>TIME</c> are supported for the HD-server,
the parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned in seconds.
<para /><para />The samples in the channel should be stored as 64 bit integer values, additionally raw mode data reading should have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaHDReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaHDReader.RawMode" /> should have been set to <c>true</c>.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.QueryData(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@,System.Int32[]@)">
            <inheritdoc />
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server has been lost.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Int32" /> values. See remarks.</exception>
            <remarks> 
Currently no other domains than <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" />.<c>TIME</c> are supported for the HD-server,
the parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned in seconds.
<para /><para />The samples in the channel should be stored as 32 bit integer values, additionally raw mode data reading should have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaHDReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaHDReader.RawMode" /> should have been set to <c>true</c>.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.QueryData(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@,System.Int16[]@)">
            <inheritdoc />
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server has been lost.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Int16" /> values. See remarks.</exception>
            <remarks> 
Currently no other domains than <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" />.<c>TIME</c> are supported for the HD-server,
the parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned in seconds.
<para /><para />The samples in the channel should be stored as 16 bit integer values, additionally raw mode data reading should have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaHDReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaHDReader.RawMode" /> should have been set to <c>true</c>.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.QueryData(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@,System.Boolean[]@)">
            <inheritdoc />
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server has been lost.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Boolean" /> values. See remarks.</exception>
            <remarks> 
Currently no other domains than <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" />.<c>TIME</c> are supported for the HD-server,
the parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned in seconds.
<para /><para />The signal should be digital, additionally raw mode data reading should have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaHDReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaHDReader.RawMode" /> should have been set to <c>true</c>.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.QueryData(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@,System.Double[]@)">
            <inheritdoc />
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server has been lost.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Double" /> values. See remarks.</exception>
            <remarks> 
Currently no other domains than <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" />.<c>TIME</c> are supported for the HD-server,
the parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned in seconds.
<para /><para />The samples in the channel should be stored as either:
<list type="bullet"><item><description>double precision floating point values.</description></item><item><description>32 bit integer values.
Additionally raw mode data reading should not have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaHDReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaHDReader.RawMode" /> should not have been set to <c>true</c></description></item></list></remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.QueryData(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@,System.Single[]@)">
            <inheritdoc />
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server has been lost.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Single" /> values. See remarks.</exception>
            <remarks> 
Currently no other domains than <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" />.<c>TIME</c> are supported for the HD-server,
the parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned in seconds.
<para /><para />The samples in the channel should be stored as either:
<list type="bullet"><item><description>boolean values.
Additionally raw mode data reading should not have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaHDReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaHDReader.RawMode" /> should not have been set to <c>true</c></description></item><item><description>single precision floating point values.</description></item><item><description>16 bit integer values.
Additionally raw mode data reading should not have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaHDReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaHDReader.RawMode" /> should not have been set to <c>true</c></description></item></list></remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.HasXBaseType(iba.ibaFilesLiteDotNet.XBaseType)">
            <inheritdoc />
            <remarks>
Currently no other domains than <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" />.<c>TIME</c> are supported for the HD-server.
</remarks>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaHDChannelReader.DefaultXBaseType">
            <inheritdoc />
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDChannelReader.GetID">
            <inheritdoc />
        </member>
        <member name="T:iba.ibaFilesLiteDotNet.IbaHDChannelReader">
            <summary>
Class representing a channel stored on an HD-server. An instance of this class exposes the info fields of the channel and the channel data can be queried from it.
</summary>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaImageList.GetImage">
            <summary>
Get the bitmap containing all images required for a channel tree.
</summary>
            <returns>The stream containing the image. Use this with Image.FromStream() to create the image.</returns>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.IbaImageList.TransparentColorB">
            <summary>
The B(lue) component of the transparent color.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.IbaImageList.TransparentColorG">
            <summary>
The G(reen) component of the transparent color.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.IbaImageList.TransparentColorR">
            <summary>
The R(ed) component of the transparent color.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.IbaImageList.TransparentColorA">
            <summary>
The A (opacity) component of the transparent color.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.IbaImageList.ColorDepth">
            <summary>
The color depth in bits of the image.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.IbaImageList.ImageHeight">
            <summary>
The height in pixels of a single image of the image list.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.IbaImageList.ImageWidth">
            <summary>
The width in pixels of a single image in the image list.
</summary>
        </member>
        <member name="T:iba.ibaFilesLiteDotNet.IbaImageList">
            <summary>
Class that provides all information to create an image list for a channel tree.
</summary>
            <example>
This sample shows how to create a Windows Forms image list using this class.
<code>
using System.Drawing;
using System.Windows.Forms;
using iba.ibaFilesLiteDotNet;

class Test
{
	public ImageList CreateChannelTreeImageList()
	{
		ImageList list = new ImageList();
		list.ColorDepth = (ColorDepth)IbaImageList.ColorDepth;
		list.ImageSize = new Size(IbaImageList.ImageWidth, IbaImageList.ImageHeight);
		list.TransparentColor = Color.FromArgb(IbaImageList.TransparentColorA, IbaImageList.TransparentColorR,
			IbaImageList.TransparentColorG, IbaImageList.TransparentColorB);
		Image image = Image.FromStream(IbaImageList.GetImage());
		list.Images.AddStrip(image);
		return list;
	}
}
</code></example>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.GetXBase(iba.ibaFilesLiteDotNet.XBaseType)">
            <inheritdoc />
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.QueryNEData(System.Double[]@,System.Object@)">
            <inheritdoc />
            <param name="timestamps">
On return, the timestamps in seconds of the sample values, relative to the start of the file. 
If <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c> rather than <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, distances in length-units are returned instead of seconds.
</param>
            <param name="data">On return, an array containing the ordinate values as an <see cref="T:System.Object" />. The <see cref="T:System.Object" /> will be an array of values, see remarks for the returned data type of the values.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if this is not a non-equidistant channel nor a text channel.</exception>
            <remarks> 
The <see cref="T:System.Object" /> that <paramref name="data" /> returns will be an array of <c>DataType</c>, where <c>DataType</c> is determined by the following table:
<para /><list type="table"><listheader><term><see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> returns :</term><term>Raw mode data reading (<see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" />) is set on the parent <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" /> instance</term><term>Raw mode data reading is not set on the parent <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" /> instance</term></listheader><item><term><c>NE_Digital</c></term><term><see cref="T:System.Boolean" /></term><term><see cref="T:System.Single" /></term></item><item><term><c>NE_Real</c></term><term><see cref="T:System.Single" /></term><term><see cref="T:System.Single" /></term></item><item><term><c>NE_Double</c></term><term><see cref="T:System.Double" /></term><term><see cref="T:System.Double" /></term></item><item><term><c>NE_Int16</c></term><term><see cref="T:System.Int16" /></term><term><see cref="T:System.Single" /></term></item><item><term><c>NE_Int32</c></term><term><see cref="T:System.Int32" /></term><term><see cref="T:System.Double" /></term></item><item><term><c>Text</c></term><term><see cref="T:System.String" /></term><term><see cref="T:System.String" /></term></item></list><para />For channels who have data for multiple domains, the default domain is used (Use <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> to determine the default domain).
</remarks>
            <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" />
            <seealso cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" />
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.QueryNEData(System.Double[]@,System.String[]@)">
            <inheritdoc />
            <param name="timestamps">On return, the timestamps in seconds of the sample values, relative to the start of the file.
If <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c> rather than <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, distances in length-units are returned instead of seconds.
</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if this is not a text channel.</exception>
            <seealso cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.Text" />
            <remarks>
                <para />For channels who have data for multiple domains, the default domain is used (Use <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> to determine the default domain).
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.QueryNEData(System.Double[]@,System.Int32[]@)">
            <inheritdoc />
            <param name="timestamps">
On return, the timestamps in seconds of the sample values, relative to the start of the file. 
If <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c> rather than <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, distances in length-units are returned instead of seconds.
</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if this is not a non-equidistant channel or if the ordinate values cannot be represented by an array of <see cref="T:System.Int32" /> values. See remarks.</exception>
            <remarks>
For this method to succeed the data samples present in the signal need to be non-equidistantly sampled; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.NonEquidistant" /> should return <c>true</c>.
Additionally the samples in the channel should be stored as 32 bit integer values, <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>NE_Int32</c>.
Additionally raw mode data reading should have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should have been set to <c>true</c>.
<para />For channels who have data for multiple domains, the default domain is used (Use <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> to determine the default domain).
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.QueryNEData(System.Double[]@,System.Int16[]@)">
            <inheritdoc />
            <param name="timestamps">
On return, the timestamps in seconds of the sample values, relative to the start of the file. 
If <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c> rather than <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, distances in length-units are returned instead of seconds.
</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if this is not a non-equidistant channel or if the ordinate values cannot be represented by an array of <see cref="T:System.Int16" /> values. See remarks.</exception>
            <remarks>
For this method to succeed the data samples present in the signal need to be non-equidistantly sampled; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.NonEquidistant" /> should return <c>true</c>.
Additionally the samples in the channel should be stored as 16 bit integer values, <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>NE_Int16</c>.
Additionally raw mode data reading should have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should have been set to <c>true</c>.
<para />For channels who have data for multiple domains, the default domain is used (Use <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> to determine the default domain).
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.QueryNEData(System.Double[]@,System.Boolean[]@)">
            <inheritdoc />
            <param name="timestamps">
On return, the timestamps in seconds of the sample values, relative to the start of the file. 
If <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c> rather than <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, distances in length-units are returned instead of seconds.
</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if this is not a non-equidistant channel or if the ordinate values cannot be represented by an array of <see cref="T:System.Boolean" /> values. See remarks.</exception>
            <remarks>
For this method to succeed the data samples present in the signal need to be non-equidistantly sampled; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.NonEquidistant" /> should return <c>true</c>.
Additionally the channel should be a digital signal, <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>NE_Digital</c>.
Additionally raw mode data reading should have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should have been set to <c>true</c>.
<para />For channels who have data for multiple domains, the default domain is used (Use <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> to determine the default domain).
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.QueryNEData(System.Double[]@,System.Double[]@)">
            <inheritdoc />
            <param name="timestamps">
On return, the timestamps in seconds of the sample values, relative to the start of the file. 
If <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c> rather than <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, distances in length-units are returned instead of seconds.
</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if this is not a non-equidistant channel or if the ordinate values cannot be represented by an array of <see cref="T:System.Double" /> values. See remarks.</exception>
            <remarks>
For this method to succeed the data samples present in the signal need to be non-equidistantly sampled; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.NonEquidistant" /> should return <c>true</c>
Additionally the samples in the channel should be stored as either:
<para /><list type="bullet"><item><description>double precision floating point values; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>NE_Double</c></description></item><item><description>32 bit integer values; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>NE_Int32</c>
Additionally raw mode data reading should not have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should not have been set to <c>true</c></description></item></list>
Otherwise the method will fail by throwing a <see cref="T:System.NotSupportedException" /><para />For channels who have data for multiple domains, the default domain is used (Use <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> to determine the default domain).
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.QueryNEData(System.Double[]@,System.Single[]@)">
            <inheritdoc />
            <param name="timestamps">
On return, the timestamps in seconds of the sample values, relative to the start of the file. 
If <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c> rather than <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, distances in length-units are returned instead of seconds.
</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if this is not a non-equidistant channel or if the ordinate values cannot be represented by an array of <see cref="T:System.Single" /> values. See remarks.</exception>
            <remarks> 
For this method to succeed the data samples present in the signal need to be non-equidistantly sampled; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.NonEquidistant" /> should return <c>true</c>
Additionally the samples in the channel should be stored as either:
<para /><list type="bullet"><item><description>boolean values; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>NE_Digital</c></description>
Additionally raw mode data reading should not have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should not have been set to <c>true</c></item><item><description>single precision floating point values; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>NE_Real</c></description></item><item><description>16 bit integer values; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>NE_Int16</c>
Additionally raw mode data reading should not have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should not have been set to <c>true</c></description></item></list>
Otherwise the method will fail by throwing a <see cref="T:System.NotSupportedException" /><para />For channels who have data for multiple domains, the default domain is used (Use <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> to determine the default domain).
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.QueryNEData(iba.ibaFilesLiteDotNet.XBaseType,System.Double[]@,System.Object@)">
            <inheritdoc />
            <param name="baseType">The domain to get the data for.</param>
            <param name="timestamps">
On return, the timestamps in seconds of the sample values, relative to the start of the file. 
If <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c> rather than <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, distances in length-units are returned instead of seconds.
</param>
            <param name="data">On return, an array containing the ordinate values as an <see cref="T:System.Object" />. The <see cref="T:System.Object" /> will be an array of values, see remarks for the returned data type of the values.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if this is not a non-equidistant channel nor a text channel.</exception>
            <remarks> 
The <see cref="T:System.Object" /> that <paramref name="data" /> returns will be an array of <c>DataType</c>, where <c>DataType</c> is determined by the following table:
<para /><list type="table"><listheader><term><see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> returns</term><term>Raw mode data reading (<see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" />) is set on the parent <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" /> instance</term><term>Raw mode data reading is not set on the parent <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" /> instance</term></listheader><item><term><c>NE_Digital</c></term><term><see cref="T:System.Boolean" /></term><term><see cref="T:System.Single" /></term></item><item><term><c>NE_Real</c></term><term><see cref="T:System.Single" /></term><term><see cref="T:System.Single" /></term></item><item><term><c>NE_Double</c></term><term><see cref="T:System.Double" /></term><term><see cref="T:System.Double" /></term></item><item><term><c>NE_Int16</c></term><term><see cref="T:System.Int16" /></term><term><see cref="T:System.Single" /></term></item><item><term><c>NE_Int32</c></term><term><see cref="T:System.Int32" /></term><term><see cref="T:System.Double" /></term></item><item><term><c>Text</c></term><term><see cref="T:System.String" /></term><term><see cref="T:System.String" /></term></item></list></remarks>
            <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" />
            <seealso cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" />
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.QueryNEData(iba.ibaFilesLiteDotNet.XBaseType,System.Double[]@,System.String[]@)">
            <inheritdoc />
            <param name="timestamps">
On return, the timestamps in seconds of the sample values, relative to the start of the file. 
If <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c> rather than <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, distances in length-units are returned instead of seconds.
</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
            <seealso cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.Text" />
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.QueryNEData(iba.ibaFilesLiteDotNet.XBaseType,System.Double[]@,System.Int32[]@)">
            <inheritdoc />
            <param name="timestamps">
On return, the timestamps in seconds of the sample values, relative to the start of the file. 
If <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c> rather than <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, distances in length-units are returned instead of seconds.
</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if this is not a non-equidistant channel or if the ordinate values cannot be represented by an array of <see cref="T:System.Int32" /> values. See remarks.</exception>
            <remarks>
For this method to succeed the data samples present in the signal need to be non-equidistantly sampled; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.NonEquidistant" /> should return <c>true</c>.
Additionally the samples in the channel should be stored as 32 bit integer values, <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>NE_Int32</c>.
Additionally raw mode data reading should have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should have been set to <c>true</c>.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.QueryNEData(iba.ibaFilesLiteDotNet.XBaseType,System.Double[]@,System.Int16[]@)">
            <inheritdoc />
            <param name="timestamps">
On return, the timestamps in seconds of the sample values, relative to the start of the file. 
If <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c> rather than <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, distances in length-units are returned instead of seconds.
</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if this is not a non-equidistant channel or if the ordinate values cannot be represented by an array of <see cref="T:System.Int16" /> values. See remarks.</exception>
            <remarks>
For this method to succeed the data samples present in the signal need to be non-equidistantly sampled; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.NonEquidistant" /> should return <c>true</c>.
Additionally the samples in the channel should be stored as 16 bit integer values, <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>NE_Int16</c>.
Additionally raw mode data reading should have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should have been set to <c>true</c>.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.QueryNEData(iba.ibaFilesLiteDotNet.XBaseType,System.Double[]@,System.Boolean[]@)">
            <inheritdoc />
            <param name="timestamps">
On return, the timestamps in seconds of the sample values, relative to the start of the file. 
If <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c> rather than <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, distances in length-units are returned instead of seconds.
</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if this is not a non-equidistant channel or if the ordinate values cannot be represented by an array of <see cref="T:System.Boolean" /> values. See remarks.</exception>
            <remarks>
For this method to succeed the data samples present in the signal need to be non-equidistantly sampled; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.NonEquidistant" /> should return <c>true</c>.
Additionally the channel should be a digital signal, <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>NE_Digital</c>.
Additionally raw mode data reading should have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should have been set to <c>true</c>.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.QueryNEData(iba.ibaFilesLiteDotNet.XBaseType,System.Double[]@,System.Double[]@)">
            <inheritdoc />
            <param name="timestamps">
On return, the timestamps in seconds of the sample values, relative to the start of the file. 
If <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c> rather than <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, distances in length-units are returned instead of seconds.
</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if this is not a non-equidistant channel or if the ordinate values cannot be represented by an array of <see cref="T:System.Double" /> values. See remarks.</exception>
            <remarks>
For this method to succeed the data samples present in the signal need to be non-equidistantly sampled; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.NonEquidistant" /> should return <c>true</c>
Additionally the samples in the channel should be stored as either:
<para /><list type="bullet"><item><description>double precision floating point values; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>NE_Double</c></description></item><item><description>32 bit integer values; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>NE_Int32</c>
Additionally raw mode data reading should not have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should not have been set to <c>true</c></description></item></list>
Otherwise the method will fail by throwing a <see cref="T:System.NotSupportedException" /></remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.QueryNEData(iba.ibaFilesLiteDotNet.XBaseType,System.Double[]@,System.Single[]@)">
            <inheritdoc />
            <param name="timestamps">
On return, the timestamps in seconds of the sample values, relative to the start of the file. 
If <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c> rather than <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, distances in length-units are returned instead of seconds.
</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if this is not a non-equidistant channel or if the ordinate values cannot be represented by an array of <see cref="T:System.Single" /> values. See remarks.</exception>
            <remarks> 
For this method to succeed the data samples present in the signal need to be non-equidistantly sampled; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.NonEquidistant" /> should return <c>true</c>
Additionally the samples in the channel should be stored as either:
<para /><list type="bullet"><item><description>boolean values; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>NE_Digital</c></description>
Additionally raw mode data reading should not have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should not have been set to <c>true</c></item><item><description>single precision floating point values; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>NE_Real</c></description></item><item><description>16 bit integer values; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>NE_Int16</c>
Additionally raw mode data reading should not have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should not have been set to <c>true</c></description></item></list>
Otherwise the method will fail by throwing a <see cref="T:System.NotSupportedException" /></remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.StopIncrementalRead">
            <inheritdoc />
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.SkipIncrementalRead(System.Int32)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed or if <see cref="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.InitIncrementalRead(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@)" /> has not been called for this channel
or if <see cref="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.StopIncrementalRead" /> has been called in the mean time.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.IncrementalRead(System.Int32,System.Object@)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed or if <see cref="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.InitIncrementalRead(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@)" /> has not been called for this channel
or if <see cref="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.StopIncrementalRead" /> has been called in the mean time.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="numberOfSamples" /> is negative.</exception>
            <remarks> 
The <see cref="T:System.Object" /> that <paramref name="data" /> returns will be an array of <c>DataType</c>, where <c>DataType</c> is determined by the following table:
<para /><list type="table"><listheader><term><see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> returns</term><term>Raw mode data reading (<see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" />) is set on the parent <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" /> instance</term><term>Raw mode data reading is not set on the parent <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" /> instance</term></listheader><item><term><c>Digital</c></term><term><see cref="T:System.Boolean" /></term><term><see cref="T:System.Single" /></term></item><item><term><c>Real</c></term><term><see cref="T:System.Single" /></term><term><see cref="T:System.Single" /></term></item><item><term><c>Double</c></term><term><see cref="T:System.Double" /></term><term><see cref="T:System.Double" /></term></item><item><term><c>Int16</c></term><term><see cref="T:System.Int16" /></term><term><see cref="T:System.Single" /></term></item><item><term><c>Int32</c></term><term><see cref="T:System.Int32" /></term><term><see cref="T:System.Double" /></term></item></list></remarks>
            <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" />
            <seealso cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" />
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.IncrementalRead(System.Int32,System.Int64[]@)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed or if <see cref="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.InitIncrementalRead(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@)" /> has not been called for this channel
or if <see cref="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.StopIncrementalRead" /> has been called in the mean time.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="numberOfSamples" /> is negative.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Int64" /> values. See remarks.</exception>
            <remarks> 
For this method to succeed the samples in the channel should be stored as 64 bit integer values, <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>Int64</c>.
Additionally raw mode data reading should have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should have been set to <c>true</c>.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.IncrementalRead(System.Int32,System.Int32[]@)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed or if <see cref="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.InitIncrementalRead(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@)" /> has not been called for this channel
or if <see cref="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.StopIncrementalRead" /> has been called in the mean time.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="numberOfSamples" /> is negative.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Int32" /> values. See remarks.</exception>
            <remarks> 
For this method to succeed the samples in the channel should be stored as 32 bit integer values, <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>Int32</c>.
Additionally raw mode data reading should have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should have been set to <c>true</c>.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.IncrementalRead(System.Int32,System.Int16[]@)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed or if <see cref="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.InitIncrementalRead(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@)" /> has not been called for this channel
or if <see cref="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.StopIncrementalRead" /> has been called in the mean time.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="numberOfSamples" /> is negative.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Int16" /> values. See remarks.</exception>
            <remarks> 
For this method to succeed the samples in the channel should be stored as 16 bit integer values, <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>Int16</c>.
Additionally raw mode data reading should have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should have been set to <c>true</c>.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.IncrementalRead(System.Int32,System.Boolean[]@)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed or if <see cref="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.InitIncrementalRead(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@)" /> has not been called for this channel
or if <see cref="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.StopIncrementalRead" /> has been called in the mean time.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="numberOfSamples" /> is negative.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Boolean" /> values. See remarks.</exception>
            <remarks> 
For this method to succeed the channel should be a digital signal, <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>Digital</c>.
Additionally raw mode data reading should have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should have been set to <c>true</c>.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.IncrementalRead(System.Int32,System.Double[]@)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed or if <see cref="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.InitIncrementalRead(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@)" /> has not been called for this channel
or if <see cref="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.StopIncrementalRead" /> has been called in the mean time.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="numberOfSamples" /> is negative.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Double" /> values. See remarks.</exception>
            <remarks> 
For this method to succeed the data samples present in the signal need to be equidistantly sampled; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.NonEquidistant" /> should return <c>false</c>
Additionally the samples in the channel should be stored as either:
<para /><list type="bullet"><item><description>double precision floating point values; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>Real</c></description></item><item><description>32 bit integer values; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>Int32</c>.
Additionally raw mode data reading should not have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should not have been set to <c>true</c></description></item></list>
Otherwise the method will fail by throwing a <see cref="T:System.NotSupportedException" /></remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.IncrementalRead(System.Int32,System.Single[]@)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed or if <see cref="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.InitIncrementalRead(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@)" /> has not been called for this channel
or if <see cref="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.StopIncrementalRead" /> has been called in the mean time.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="numberOfSamples" /> is negative.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Single" /> values. See remarks.</exception>
            <remarks> 
For this method to succeed the data samples present in the signal need to be equidistantly sampled; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.NonEquidistant" /> should return <c>false</c>
Additionally the samples in the channel should be stored as either:
<para /><list type="bullet"><item><description>boolean values; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>Digital</c></description>
Additionally raw mode data reading should not have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should not have been set to <c>true</c></item><item><description>single precision floating point values; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>Real</c></description></item><item><description>16 bit integer values; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>Int16</c>.
Additionally raw mode data reading should not have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should not have been set to <c>true</c></description></item></list>
Otherwise the method will fail by throwing a <see cref="T:System.NotSupportedException" /></remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.InitIncrementalRead(System.Single@,System.Single@)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
            <remarks>
The parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned 
in seconds if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" />  is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, in length units if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c>, 
in hertz if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.FREQUENCY</c> and in 1/length-unit if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.INVLENGTH</c>.
<para />
For this method to succeed the data samples present in the signal need to be equidistantly sampled; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.NonEquidistant" /> should return <c>false</c>.
<para />For channels who have data for multiple domains (e.g. QDRv1 files with both length and time-based data), the default domain is used (Use <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> to determine the default domain).
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.InitIncrementalRead(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
            <remarks>
The parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned 
in seconds if <paramref name="xBase" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, in length units if <paramref name="xBase" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c>, 
in hertz if <paramref name="xBase" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.FREQUENCY</c> and in 1/length-unit if <paramref name="xBase" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.INVLENGTH</c>.
<para />
For this method to succeed the data samples present in the signal need to be equidistantly sampled; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.NonEquidistant" /> should return <c>false</c>.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.QueryData(System.Single@,System.Single@,System.Object@)">
            <inheritdoc />
            <param name="data"> On return, the signal samples as an <see cref="T:System.Object" />. The <see cref="T:System.Object" /> will be an array of values, see remarks for the returned data type of the values.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of values. See remarks.</exception>
            <remarks> 
The parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned 
in seconds if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" />  is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, in length units if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c>, 
in hertz if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.FREQUENCY</c> and in 1/length-unit if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.INVLENGTH</c>.
<para /><para />For this method to succeed the data samples present in the signal need to be equidistantly sampled; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.NonEquidistant" /> should return <c>false</c>.
The <see cref="T:System.Object" /> that <paramref name="data" /> returns will be an array of <c>DataType</c>, where <c>DataType</c> is determined by the following table:
<list type="table"><para /><listheader><term><see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> returns</term><term>Raw mode data reading (<see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" />) is set on the parent <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" /> instance</term><term>Raw mode data reading is not set on the parent <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" /> instance</term></listheader><item><term><c>Digital</c></term><term><see cref="T:System.Boolean" /></term><term><see cref="T:System.Single" /></term></item><item><term><c>Real</c></term><term><see cref="T:System.Single" /></term><term><see cref="T:System.Single" /></term></item><item><term><c>Double</c></term><term><see cref="T:System.Double" /></term><term><see cref="T:System.Double" /></term></item><item><term><c>Int16</c></term><term><see cref="T:System.Int16" /></term><term><see cref="T:System.Single" /></term></item><item><term><c>Int32</c></term><term><see cref="T:System.Int32" /></term><term><see cref="T:System.Double" /></term></item></list><para />For channels who have data for multiple domains (e.g. QDRv1 files with both length and time-based data), the default domain is used (Use <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> to determine the default domain).
</remarks>
            <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" />
            <seealso cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" />
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.QueryData(System.Single@,System.Single@,System.Int64[]@)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of <see cref="T:System.Int32" /> values. See remarks.</exception>
            <remarks> 
The parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned 
in seconds if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" />  is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, in length units if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c>, 
in hertz if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.FREQUENCY</c> and in 1/length-unit if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.INVLENGTH</c>.
<para /><para />For this method to succeed the data samples present in the signal need to be equidistantly sampled; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.NonEquidistant" /> should return <c>false</c>.
Additionally the samples in the channel should be stored as 64 bit integer values, <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>Int64</c>.
Additionally raw mode data reading should have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should have been set to <c>true</c>.
<para />For channels who have data for multiple domains (e.g. QDRv1 files with both length and time-based data), the default domain is used (Use <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> to determine the default domain).
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.QueryData(System.Single@,System.Single@,System.Int32[]@)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of <see cref="T:System.Int32" /> values. See remarks.</exception>
            <remarks> 
The parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned 
in seconds if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" />  is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, in length units if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c>, 
in hertz if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.FREQUENCY</c> and in 1/length-unit if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.INVLENGTH</c>.
<para /><para />For this method to succeed the data samples present in the signal need to be equidistantly sampled; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.NonEquidistant" /> should return <c>false</c>.
Additionally the samples in the channel should be stored as 32 bit integer values, <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>Int32</c>.
Additionally raw mode data reading should have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should have been set to <c>true</c>.
<para />For channels who have data for multiple domains (e.g. QDRv1 files with both length and time-based data), the default domain is used (Use <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> to determine the default domain).
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.QueryData(System.Single@,System.Single@,System.Int16[]@)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of <see cref="T:System.Int16" /> values. See remarks.</exception>
            <remarks> 
The parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned 
in seconds if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" />  is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, in length units if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c>, 
in hertz if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.FREQUENCY</c> and in 1/length-unit if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.INVLENGTH</c>.
<para /><para />For this method to succeed the data samples present in the signal need to be equidistantly sampled; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.NonEquidistant" /> should return <c>false</c>.
Additionally the samples in the channel should be stored as 16 bit integer values, <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>Int16</c>.
Additionally raw mode data reading should have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should have been set to <c>true</c>.
<para />For channels who have data for multiple domains (e.g. QDRv1 files with both length and time-based data), the default domain is used (Use <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> to determine the default domain).
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.QueryData(System.Single@,System.Single@,System.Boolean[]@)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of <see cref="T:System.Boolean" /> values. See remarks.</exception>
            <remarks> 
The parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned 
in seconds if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" />  is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, in length units if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c>, 
in hertz if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.FREQUENCY</c> and in 1/length-unit if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.INVLENGTH</c>.
<para /><para />For this method to succeed the data samples present in the signal need to be equidistantly sampled; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.NonEquidistant" /> should return <c>false</c>.
Additionally the signal should be digital, <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>Digital</c>.
Additionally raw mode data reading should have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should have been set to <c>true</c>.
<para />For channels who have data for multiple domains (e.g. QDRv1 files with both length and time-based data), the default domain is used (Use <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> to determine the default domain).
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.QueryData(System.Single@,System.Single@,System.Double[]@)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of <see cref="T:System.Double" /> values. See remarks.</exception>
            <remarks> 
The parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned 
in seconds if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" />  is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, in length units if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c>, 
in hertz if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.FREQUENCY</c> and in 1/length-unit if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.INVLENGTH</c>.
<para /><para />For this method to succeed the data samples present in the signal need to be equidistantly sampled; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.NonEquidistant" /> should return <c>false</c>.
Additionally the samples in the channel should be stored as either:
<list type="bullet"><item><description>double precision floating point values; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>Double</c></description>.
</item><item><description>32 bit integer values; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>Int32</c>.
Additionally raw mode data reading should not have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should not have been set to <c>true</c>.
</description></item></list><para />For channels who have data for multiple domains (e.g. QDRv1 files with both length and time-based data), the default domain is used (Use <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> to determine the default domain).
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.QueryData(System.Single@,System.Single@,System.Single[]@)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of <see cref="T:System.Single" /> values. See remarks.</exception>
            <remarks> 
The parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned 
in seconds if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" />  is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, in length units if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" />  is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c>, 
in hertz if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.FREQUENCY</c> and in 1/length-unit if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.INVLENGTH</c>.
<para />For this method to succeed the data samples present in the signal need to be equidistantly sampled; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.NonEquidistant" /> should return <c>false</c>
Additionally the samples in the channel should be stored as either:
<list type="bullet"><item><description>boolean values; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>Digital</c>
Additionally raw mode data reading should not have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should not have been set to <c>true</c></description></item><item><description>single precision floating point values; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>Real</c></description></item><item><description>16 bit integer values; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>Int16</c>.
Additionally raw mode data reading should not have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should not have been set to <c>true</c></description></item></list><para />For channels who have data for multiple domains (e.g. QDRv1 files with both length and time-based data), the default domain is used (Use <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> to determine the default domain).
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.QueryData(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@,System.Object@)">
            <inheritdoc />
            <param name="data"> On return, the signal samples as an <see cref="T:System.Object" />. The <see cref="T:System.Object" /> will be an array of values, see remarks for the returned data type of the values.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of values. See remarks.</exception>
            <remarks> 
The parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned 
in seconds if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" />  is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, in length units if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c>, 
in hertz if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.FREQUENCY</c> and in 1/length-unit if <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.INVLENGTH</c>.
<para /><para />For this method to succeed the data samples present in the signal need to be equidistantly sampled; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.NonEquidistant" /> should return <c>false</c>.
The <see cref="T:System.Object" /> that <paramref name="data" /> returns will be an array of <c>DataType</c>, where <c>DataType</c> is determined by the following table:
<para /><list type="table"><listheader><term><see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> returns</term><term>Raw mode data reading (<see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" />) is set on the parent <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" /> instance</term><term>Raw mode data reading is not set on the parent <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" /> instance</term></listheader><item><term><c>Digital</c></term><term><see cref="T:System.Boolean" /></term><term><see cref="T:System.Single" /></term></item><item><term><c>Real</c></term><term><see cref="T:System.Single" /></term><term><see cref="T:System.Single" /></term></item><item><term><c>Double</c></term><term><see cref="T:System.Double" /></term><term><see cref="T:System.Double" /></term></item><item><term><c>Int16</c></term><term><see cref="T:System.Int16" /></term><term><see cref="T:System.Single" /></term></item><item><term><c>Int32</c></term><term><see cref="T:System.Int32" /></term><term><see cref="T:System.Double" /></term></item><item><term><c>Int64</c></term><term><see cref="T:System.Int64" /></term><term><see cref="T:System.Double" /></term></item></list></remarks>
            <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" />
            <seealso cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" />
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.QueryData(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@,System.Int64[]@)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Int64" /> values. See remarks.</exception>
            <remarks> 
The parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned 
in seconds if <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, in length units if <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c>, 
in hertz if <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.FREQUENCY</c> and in 1/length-unit if <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.INVLENGTH</c>.
<para /><para />For this method to succeed the data samples present in the signal need to be equidistantly sampled; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.NonEquidistant" /> should return <c>false</c>.
Additionally the samples in the channel should be stored as 64 bit integer values, <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>Int64</c>.
Additionally raw mode data reading should have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should have been set to <c>true</c>.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.QueryData(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@,System.Int32[]@)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Int32" /> values. See remarks.</exception>
            <remarks> 
The parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned 
in seconds if <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, in length units if <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c>, 
in hertz if <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.FREQUENCY</c> and in 1/length-unit if <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.INVLENGTH</c>.
<para /><para />For this method to succeed the data samples present in the signal need to be equidistantly sampled; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.NonEquidistant" /> should return <c>false</c>.
Additionally the samples in the channel should be stored as 32 bit integer values, <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>Int32</c>.
Additionally raw mode data reading should have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should have been set to <c>true</c>.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.QueryData(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@,System.Int16[]@)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Int16" /> values. See remarks.</exception>
            <remarks> 
The parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned 
in seconds if <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, in length units if <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c>, 
in hertz if <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.FREQUENCY</c> and in 1/length-unit if <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.INVLENGTH</c>.
<para /><para />For this method to succeed the data samples present in the signal need to be equidistantly sampled; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.NonEquidistant" /> should return <c>false</c>.
Additionally the samples in the channel should be stored as 16 bit integer values, <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>Int16</c>.
Additionally raw mode data reading should have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should have been set to <c>true</c>.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.QueryData(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@,System.Boolean[]@)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Boolean" /> values. See remarks.</exception>
            <remarks> 
The parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned 
in seconds if <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, in length units if <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c>, 
in hertz if <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.FREQUENCY</c> and in 1/length-unit if <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.INVLENGTH</c>.
<para /><para /> For this method to succeed the data samples present in the signal need to be equidistantly sampled; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.NonEquidistant" /> should return <c>false</c>.
Additionally the signal should be digital, <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>Digital</c>.
Additionally raw mode data reading should have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should have been set to <c>true</c>.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.QueryData(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@,System.Double[]@)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of <see cref="T:System.Double" /> values. See remarks.</exception>
            <remarks> 
The parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned 
in seconds if <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, in length units if <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c>, 
in hertz if <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.FREQUENCY</c> and in 1/length-unit if <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.INVLENGTH</c>.
<para /><para />For this method to succeed the data samples present in the signal need to be equidistantly sampled; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.NonEquidistant" /> should return <c>false</c>.
Additionally the samples in the channel should be stored as either:
<list type="bullet"><item><description>double precision floating point values; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>Double</c></description>.
</item><item><description>32 bit integer values; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>Int32</c>.
Additionally raw mode data reading should not have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should not have been set to <c>true</c>.
</description></item></list></remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.QueryData(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@,System.Single[]@)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of <see cref="T:System.Single" /> values. See remarks.</exception>
            <remarks> 
The parameters <paramref name="xBase" /> and <paramref name="xOffset" /> are returned 
in seconds if <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, in length units if <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c>, 
in hertz if <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.FREQUENCY</c> and in 1/length-unit if <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.INVLENGTH</c>.
<para /><para />For this method to succeed the data samples present in the signal need to be equidistantly sampled; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.NonEquidistant" /> should return <c>false</c>
Additionally the samples in the channel should be stored as either:
<list type="bullet"><item><description>boolean values; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>Digital</c>
Additionally raw mode data reading should not have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should not have been set to <c>true</c></description></item><item><description>single precision floating point values; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>Real</c></description></item><item><description>16 bit integer values; i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType" /> should return <see cref="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum" />.<c>Int16</c>.
Additionally raw mode data reading should not have been enabled on the parent instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaFileReader" />, i.e. <see cref="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode" /> should not have been set to <c>true</c></description></item></list></remarks>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.Parent">
            <inheritdoc />
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.Comment2">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.Comment1">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.Unit">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.Name">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.ChannelType">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.DefaultXBaseType">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.HasXBaseType(iba.ibaFilesLiteDotNet.XBaseType)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.NonEquidistant">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.Text">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.Digital">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.Analog">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileChannelReader.GetID">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaFileChannelReader.InfoFields">
            <summary>
A dictionary collection containing the info fields of the channel.
If the .dat file was opened in OpenForUpdate mode, you'll be able to modify the collection; otherwise, the collection is read-only.
</summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the file the channel belongs to has been closed.</exception>
        </member>
        <member name="T:iba.ibaFilesLiteDotNet.IbaFileChannelReader">
            <summary>
Class representing a channel in the .dat file. An instance of this class exposes the info fields of the channel and the channel data can be queried from it.
</summary>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.GetXBase(iba.ibaFilesLiteDotNet.XBaseType)">
            <summary>
Gets the xbase for the requested domain. 
</summary>
            <param name="baseType">The domain to get the xbase for.</param>
            <returns>The xBase for the requested domain.</returns>
            <remarks>
The return value is expressed in seconds if <paramref name="baseType" />  is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.TIME</c>, in length units if <paramref name="baseType" />  is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.LENGTH</c>, 
in hertz if <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.FREQUENCY</c> and in 1/length-unit if <paramref name="baseType" /> is <see cref="T:iba.ibaFilesLiteDotNet.XBaseType" /><c>.INVLENGTH</c>.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.QueryNEData(System.Double[]@,System.Object@)">
            <summary>
Gets the non-equidistant signal data as an <see cref="T:System.Object" />.
</summary>
            <param name="timestamps">On return, the timestamps in seconds of the sample values, relative to the start of the file or query range.
</param>
            <param name="data"> On return, the signal samples as an <see cref="T:System.Object" />. The <see cref="T:System.Object" /> will be an array of values, 
the data type of the values depends on how the data is internally stored and on how the property <see cref="P:iba.ibaFilesLiteDotNet.IbaReader.RawMode" /> is set, see implementing classes.
</param>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.QueryNEData(System.Double[]@,System.String[]@)">
            <summary>
Gets the data for a text channel. 
</summary>
            <param name="timestamps">On return, the timestamps in seconds of the sample values, relative to the start of the file or query range.
</param>
            <param name="data">On return, the texts</param>
            <exception cref="T:System.NotSupportedException">Thrown if this is not a text channel.</exception>
            <seealso cref="P:iba.ibaFilesLiteDotNet.IbaChannelReader.Text" />
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.QueryNEData(System.Double[]@,System.Boolean[]@)">
            <summary>
Gets the signal data for channels where the signal data is non-equidistantly sampled.
The ordinate values are returned as an array of <see cref="T:System.Boolean" /> values.
</summary>
            <param name="timestamps">
On return, the timestamps in seconds of the sample values, relative to the start of the file or query range. 
</param>
            <param name="data">On return, an array containing the ordinate values.</param>
            <remarks>Not all implementing classes support this method. See their separate documentation.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.QueryNEData(System.Double[]@,System.Int32[]@)">
            <summary>
Gets the signal data for channels where the signal data is non-equidistantly sampled.
The ordinate values are returned as an array of <see cref="T:System.Int32" /> values.
</summary>
            <param name="timestamps">
On return, the timestamps in seconds of the sample values, relative to the start of the file or query range. 
</param>
            <param name="data">On return, an array containing the ordinate values.</param>
            <remarks>Not all implementing classes support this method. See their separate documentation.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.QueryNEData(System.Double[]@,System.Int16[]@)">
            <summary>
Gets the signal data for channels where the signal data is non-equidistantly sampled.
The ordinate values are returned as an array of <see cref="T:System.Int16" /> values.
</summary>
            <param name="timestamps">
On return, the timestamps in seconds of the sample values, relative to the start of the file or query range. 
</param>
            <param name="data">On return, an array containing the ordinate values.</param>
            <remarks>Not all implementing classes support this method. See their separate documentation.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.QueryNEData(System.Double[]@,System.Double[]@)">
            <summary>
Gets the signal data for channels where the signal data is non-equidistantly sampled.
The ordinate values are returned as an array of <see cref="T:System.Double" /> values.
</summary>
            <param name="timestamps">
On return, the timestamps in seconds of the sample values, relative to the start of the file or query range. 
</param>
            <param name="data">On return, an array containing the ordinate values.</param>
            <remarks>Not all implementing classes support this method. See their separate documentation.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.QueryNEData(System.Double[]@,System.Single[]@)">
            <summary>
Gets the signal data for channels where the signal data is non-equidistantly sampled.
The ordinate values are returned as an array of <see cref="T:System.Single" /> values.
</summary>
            <param name="timestamps">
On return, the timestamps in seconds of the sample values, relative to the start of the file or query range. 
</param>
            <param name="data">On return, an array containing the ordinate values.</param>
            <remarks>Not all implementing classes support this method. See their separate documentation.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.QueryNEData(iba.ibaFilesLiteDotNet.XBaseType,System.Double[]@,System.Object@)">
            <summary>
Gets the non-equidistant signal data as an <see cref="T:System.Object" />.
</summary>
            <param name="baseType">The domain to get the data for.</param>
            <param name="timestamps">On return, the timestamps in seconds of the sample values, relative to the start of the file or query range.
</param>
            <param name="data"> On return, the signal samples as an <see cref="T:System.Object" />. The <see cref="T:System.Object" /> will be an array of values, 
the data type of the values depends on how the data is internally stored and on how the property <see cref="P:iba.ibaFilesLiteDotNet.IbaReader.RawMode" /> is set, see implementing classes.
</param>
            <exception cref="T:System.ArgumentException">Thrown if the channel has no data in the domain specified by <paramref name="baseType" />.</exception>
            <seealso cref="P:iba.ibaFilesLiteDotNet.IbaChannelReader.Text" />
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.QueryNEData(iba.ibaFilesLiteDotNet.XBaseType,System.Double[]@,System.String[]@)">
            <summary>
Gets the data for a text channel. 
</summary>
            <param name="baseType">The domain to get the data for.</param>
            <param name="timestamps">On return, the timestamps in seconds of the sample values, relative to the start of the file or query range.
</param>
            <param name="data">On return, the texts</param>
            <exception cref="T:System.ArgumentException">Thrown if the channel has no data in the domain specified by <paramref name="baseType" />.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if this is not a text channel.</exception>
            <seealso cref="P:iba.ibaFilesLiteDotNet.IbaChannelReader.Text" />
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.QueryNEData(iba.ibaFilesLiteDotNet.XBaseType,System.Double[]@,System.Boolean[]@)">
            <summary>
Gets the signal data for channels where the signal data is non-equidistantly sampled.
The ordinate values are returned as an array of <see cref="T:System.Boolean" /> values.
</summary>
            <param name="baseType">The domain to get the data for.</param>
            <param name="timestamps">
On return, the timestamps in seconds of the sample values, relative to the start of the file or query range. 
</param>
            <param name="data">On return, an array containing the ordinate values.</param>
            <exception cref="T:System.ArgumentException">Thrown if the channel has no data in the domain specified by <paramref name="baseType" />.</exception>
            <remarks>Not all implementing classes support this method. See their separate documentation.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.QueryNEData(iba.ibaFilesLiteDotNet.XBaseType,System.Double[]@,System.Int32[]@)">
            <summary>
Gets the signal data for channels where the signal data is non-equidistantly sampled.
The ordinate values are returned as an array of <see cref="T:System.Int32" /> values.
</summary>
            <param name="baseType">The domain to get the data for.</param>
            <param name="timestamps">
On return, the timestamps in seconds of the sample values, relative to the start of the file or query range. 
</param>
            <param name="data">On return, an array containing the ordinate values.</param>
            <exception cref="T:System.ArgumentException">Thrown if the channel has no data in the domain specified by <paramref name="baseType" />.</exception>
            <remarks>Not all implementing classes support this method. See their separate documentation.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.QueryNEData(iba.ibaFilesLiteDotNet.XBaseType,System.Double[]@,System.Int16[]@)">
            <summary>
Gets the signal data for channels where the signal data is non-equidistantly sampled.
The ordinate values are returned as an array of <see cref="T:System.Int16" /> values.
</summary>
            <param name="baseType">The domain to get the data for.</param>
            <param name="timestamps">
On return, the timestamps in seconds of the sample values, relative to the start of the file or query range. 
</param>
            <param name="data">On return, an array containing the ordinate values.</param>
            <exception cref="T:System.ArgumentException">Thrown if the channel has no data in the domain specified by <paramref name="baseType" />.</exception>
            <remarks>Not all implementing classes support this method. See their separate documentation.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.QueryNEData(iba.ibaFilesLiteDotNet.XBaseType,System.Double[]@,System.Double[]@)">
            <summary>
Gets the signal data for channels where the signal data is non-equidistantly sampled.
The ordinate values are returned as an array of <see cref="T:System.Double" /> values.
</summary>
            <param name="baseType">The domain to get the data for.</param>
            <param name="timestamps">
On return, the timestamps in seconds of the sample values, relative to the start of the file or query range. 
</param>
            <param name="data">On return, an array containing the ordinate values.</param>
            <exception cref="T:System.ArgumentException">Thrown if the channel has no data in the domain specified by <paramref name="baseType" />.</exception>
            <remarks>Not all implementing classes support this method. See their separate documentation.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.QueryNEData(iba.ibaFilesLiteDotNet.XBaseType,System.Double[]@,System.Single[]@)">
            <summary>
Gets the signal data for channels where the signal data is non-equidistantly sampled.
The ordinate values are returned as an array of <see cref="T:System.Single" /> values.
</summary>
            <param name="baseType">The domain to get the data for.</param>
            <param name="timestamps">
On return, the timestamps in seconds of the sample values, relative to the start of the file or query range. 
</param>
            <param name="data">On return, an array containing the ordinate values.</param>
            <exception cref="T:System.ArgumentException">Thrown if the channel has no data in the domain specified by <paramref name="baseType" />.</exception>
            <remarks>Not all implementing classes support this method. See their separate documentation.
</remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.StopIncrementalRead">
            <summary>
Use this method to inform the instance that no further incremental reads will happen, so the instance can release the resources necessary for the incremental read.
</summary>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.SkipIncrementalRead(System.Int32)">
            <summary>
While doing an incremental read of a channel, skip a number of samples.
</summary>
            <param name="numberOfSamples">The desired number of samples to skip.</param>
            <returns>The number of samples actually skipped. This could be less than the requested number of samples <paramref name="numberOfSamples" /> if the end of the data is reached.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="M:iba.ibaFilesLiteDotNet.IbaChannelReader.InitIncrementalRead(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@)" /> has not been called for this channel 
or if <see cref="M:iba.ibaFilesLiteDotNet.IbaChannelReader.StopIncrementalRead" /> has been called in the mean time.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="numberOfSamples" /> is negative.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.IncrementalRead(System.Int32,System.Object@)">
            <summary>
Read an incremental part of the signal data as an <see cref="T:System.Object" />.
</summary>
            <param name="numberOfSamples">The desired number of samples to read.</param>
            <param name="data"> On return, the signal samples as an <see cref="T:System.Object" />. The <see cref="T:System.Object" /> will be an array of values, 
the data type of the values depends on how the data is internally stored and on how the property <see cref="P:iba.ibaFilesLiteDotNet.IbaReader.RawMode" /> is set, see implementing classes.
</param>
            <returns>The number of samples actually read. This could be less than the requested number of samples <paramref name="numberOfSamples" /> if the end of the data is reached.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="M:iba.ibaFilesLiteDotNet.IbaChannelReader.InitIncrementalRead(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@)" /> has not been called for this channel 
or if <see cref="M:iba.ibaFilesLiteDotNet.IbaChannelReader.StopIncrementalRead" /> has been called in the mean time.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="numberOfSamples" /> is negative.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.IncrementalRead(System.Int32,System.Boolean[]@)">
            <summary>
Read an incremental part of the digital signal data as an array of <see cref="T:System.Boolean" /> values.
</summary>
            <param name="numberOfSamples">The desired number of samples to read.</param>
            <param name="data"> On return, an array containing the next <paramref name="numberOfSamples" /> values.</param>
            <returns>The number of samples actually read. This could be less than the requested number of samples <paramref name="numberOfSamples" /> if the end of the data is reached.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="M:iba.ibaFilesLiteDotNet.IbaChannelReader.InitIncrementalRead(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@)" /> has not been called for this channel 
or if <see cref="M:iba.ibaFilesLiteDotNet.IbaChannelReader.StopIncrementalRead" /> has been called in the mean time.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="numberOfSamples" /> is negative.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Boolean" /> values.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.IncrementalRead(System.Int32,System.Int64[]@)">
            <summary>
Read an incremental part of the signal data as an array of <see cref="T:System.Int64" /> values.
</summary>
            <param name="numberOfSamples">The desired number of samples to read.</param>
            <param name="data"> On return, an array containing the next <paramref name="numberOfSamples" /> values.</param>
            <returns>The number of samples actually read. This could be less than the requested number of samples <paramref name="numberOfSamples" /> if the end of the data is reached.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="M:iba.ibaFilesLiteDotNet.IbaChannelReader.InitIncrementalRead(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@)" /> has not been called for this channel 
or if <see cref="M:iba.ibaFilesLiteDotNet.IbaChannelReader.StopIncrementalRead" />  has been called in the mean time.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="numberOfSamples" /> is negative.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Int64" /> values. </exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.IncrementalRead(System.Int32,System.Int32[]@)">
            <summary>
Read an incremental part of the signal data as an array of <see cref="T:System.Int32" /> values.
</summary>
            <param name="numberOfSamples">The desired number of samples to read.</param>
            <param name="data"> On return, an array containing the next <paramref name="numberOfSamples" /> values.</param>
            <returns>The number of samples actually read. This could be less than the requested number of samples <paramref name="numberOfSamples" /> if the end of the data is reached.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="M:iba.ibaFilesLiteDotNet.IbaChannelReader.InitIncrementalRead(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@)" /> has not been called for this channel 
or if <see cref="M:iba.ibaFilesLiteDotNet.IbaChannelReader.StopIncrementalRead" />  has been called in the mean time.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="numberOfSamples" /> is negative.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Int32" /> values. </exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.IncrementalRead(System.Int32,System.Int16[]@)">
            <summary>
Read an incremental part of the signal data as an array of <see cref="T:System.Int16" /> values.
</summary>
            <param name="numberOfSamples">The desired number of samples to read.</param>
            <param name="data"> On return, an array containing the next <paramref name="numberOfSamples" /> values.</param>
            <returns>The number of samples actually read. This could be less than the requested number of samples <paramref name="numberOfSamples" /> if the end of the data is reached.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="M:iba.ibaFilesLiteDotNet.IbaChannelReader.InitIncrementalRead(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@)" /> has not been called for this channel 
or if <see cref="M:iba.ibaFilesLiteDotNet.IbaChannelReader.StopIncrementalRead" />  has been called in the mean time.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="numberOfSamples" /> is negative.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Int16" /> values. </exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.IncrementalRead(System.Int32,System.Double[]@)">
            <summary>
Read an incremental part of the signal data as an array of <see cref="T:System.Double" /> values.
</summary>
            <param name="numberOfSamples">The desired number of samples to read.</param>
            <param name="data"> On return, an array containing the next <paramref name="numberOfSamples" /> values.</param>
            <returns>The number of samples actually read. This could be less than the requested number of samples <paramref name="numberOfSamples" /> if the end of the data is reached.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="M:iba.ibaFilesLiteDotNet.IbaChannelReader.InitIncrementalRead(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@)" /> has not been called for this channel 
or if <see cref="M:iba.ibaFilesLiteDotNet.IbaChannelReader.StopIncrementalRead" />  has been called in the mean time.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="numberOfSamples" /> is negative.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Double" /> values.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.IncrementalRead(System.Int32,System.Single[]@)">
            <summary>
Read an incremental part of the signal data as an array of <see cref="T:System.Single" /> values.
</summary>
            <param name="numberOfSamples">The desired number of samples to read.</param>
            <param name="data"> On return, an array containing the next <paramref name="numberOfSamples" /> values.</param>
            <returns>The number of samples actually read. This could be less than the requested number of samples <paramref name="numberOfSamples" /> if the end of the data is reached.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="M:iba.ibaFilesLiteDotNet.IbaChannelReader.InitIncrementalRead(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@)" /> has not been called for this channel 
or if <see cref="M:iba.ibaFilesLiteDotNet.IbaChannelReader.StopIncrementalRead" />  has been called in the mean time.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="numberOfSamples" /> is negative.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Single" /> values.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.InitIncrementalRead(System.Single@,System.Single@)">
            <summary>
Initializes the instance to read signal data in increments rather than all samples at once.
</summary>
            <param name="xBase"> On return, the sample interval.</param>
            <param name="xOffset"> On return, the offset of the channel data from the start of the file or query range.</param>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.InitIncrementalRead(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@)">
            <summary>
Initializes the instance to read signal data in increments rather than all samples at once.
</summary>
            <param name="baseType">The domain to get the data for.</param>
            <param name="xBase"> On return, the sample interval.</param>
            <param name="xOffset"> On return, the offset of the channel data from the start of the file or query range.</param>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.QueryData(System.Single@,System.Single@,System.Object@)">
            <summary>
Gets the signal data as an <see cref="T:System.Object" />.
</summary>
            <param name="xBase"> On return, the sample interval.</param>
            <param name="xOffset"> On return, the offset of the channel data from the start of the file or query range.</param>
            <param name="data"> On return, the signal samples as an <see cref="T:System.Object" />. The <see cref="T:System.Object" /> will be an array of values, 
the data type of the values depends on how the data is internally stored and on how the property <see cref="P:iba.ibaFilesLiteDotNet.IbaReader.RawMode" /> is set, see implementing classes.
</param>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.QueryData(System.Single@,System.Single@,System.Int64[]@)">
            <summary>
Gets a signal data as an array of <see cref="T:System.Int64" /> values.
</summary>
            <param name="xBase"> On return, the sample interval.</param>
            <param name="xOffset"> On return, the offset of the channel data from the start of the file or query range.</param>
            <param name="data"> On return, the signal samples as an array</param>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Int64" /> values.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.QueryData(System.Single@,System.Single@,System.Int32[]@)">
            <summary>
Gets a signal data as an array of <see cref="T:System.Int32" /> values.
</summary>
            <param name="xBase"> On return, the sample interval.</param>
            <param name="xOffset"> On return, the offset of the channel data from the start of the file or query range.</param>
            <param name="data"> On return, the signal samples as an array</param>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Int32" /> values.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.QueryData(System.Single@,System.Single@,System.Int16[]@)">
            <summary>
Gets a signal data as an array of <see cref="T:System.Int16" /> values.
</summary>
            <param name="xBase"> On return, the sample interval.</param>
            <param name="xOffset"> On return, the offset of the channel data from the start of the file or query range.</param>
            <param name="data"> On return, the signal samples as an array</param>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Int16" /> values.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.QueryData(System.Single@,System.Single@,System.Boolean[]@)">
            <summary>
Gets a digital signal data as an array of <see cref="T:System.Boolean" /> values.
</summary>
            <param name="xBase"> On return, the sample interval.</param>
            <param name="xOffset"> On return, the offset of the channel data from the start of the file or query range.</param>
            <param name="data"> On return, the signal samples as an array</param>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Boolean" /> values.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.QueryData(System.Single@,System.Single@,System.Double[]@)">
            <summary>
Gets the signal data as an array of <see cref="T:System.Double" /> values.
</summary>
            <param name="xBase"> On return, the sample interval. </param>
            <param name="xOffset"> On return, the offset of the channel data from the start of the file or query range. </param>
            <param name="data"> On return, the signal samples as an array</param>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Double" /> values.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.QueryData(System.Single@,System.Single@,System.Single[]@)">
            <summary>
Gets the signal data as an array of <see cref="T:System.Single" /> values.
</summary>
            <param name="xBase"> On return, the sample interval. </param>
            <param name="xOffset"> On return, the offset of the channel data from the start of the file or query range. </param>
            <param name="data"> On return, the signal samples as an array</param>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Single" /> values.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.QueryData(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@,System.Object@)">
            <summary>
Gets the signal data as an <see cref="T:System.Object" />.
</summary>
            <param name="baseType">The domain to get the data for.</param>
            <param name="xBase"> On return, the sample interval.</param>
            <param name="xOffset"> On return, the offset of the channel data from the start of the file or query range.</param>
            <param name="data"> On return, the signal samples as an <see cref="T:System.Object" />. The <see cref="T:System.Object" /> will be an array of values, 
the data type of the values depends on how the data is internally stored and on how the property <see cref="P:iba.ibaFilesLiteDotNet.IbaReader.RawMode" /> is set, see implementing classes.
</param>
            <exception cref="T:System.ArgumentException">Thrown if the channel has no data in the domain specified by <paramref name="baseType" />.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.QueryData(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@,System.Int64[]@)">
            <summary>
Gets a signal data as an array of <see cref="T:System.Int64" /> values.
</summary>
            <param name="baseType">The domain to get the data for.</param>
            <param name="xBase"> On return, the sample interval.</param>
            <param name="xOffset"> On return, the offset of the channel data from the start of the file or query range.</param>
            <param name="data"> On return, the signal samples as an array</param>
            <exception cref="T:System.ArgumentException">Thrown if the channel has no data in the domain specified by <paramref name="baseType" />.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Int32" /> values.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.QueryData(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@,System.Int32[]@)">
            <summary>
Gets a signal data as an array of <see cref="T:System.Int32" /> values.
</summary>
            <param name="baseType">The domain to get the data for.</param>
            <param name="xBase"> On return, the sample interval.</param>
            <param name="xOffset"> On return, the offset of the channel data from the start of the file or query range.</param>
            <param name="data"> On return, the signal samples as an array</param>
            <exception cref="T:System.ArgumentException">Thrown if the channel has no data in the domain specified by <paramref name="baseType" />.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Int32" /> values.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.QueryData(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@,System.Int16[]@)">
            <summary>
Gets a signal data as an array of <see cref="T:System.Int16" /> values.
</summary>
            <param name="baseType">The domain to get the data for.</param>
            <param name="xBase"> On return, the sample interval.</param>
            <param name="xOffset"> On return, the offset of the channel data from the start of the file or query range.</param>
            <param name="data"> On return, the signal samples as an array</param>
            <exception cref="T:System.ArgumentException">Thrown if the channel has no data in the domain specified by <paramref name="baseType" />.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Int16" /> values.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.QueryData(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@,System.Boolean[]@)">
            <summary>
Gets a digital signal data as an array of <see cref="T:System.Boolean" /> values.
</summary>
            <param name="baseType">The domain to get the data for.</param>
            <param name="xBase"> On return, the sample interval.</param>
            <param name="xOffset"> On return, the offset of the channel data from the start of the file or query range.</param>
            <param name="data"> On return, the signal samples as an array</param>
            <exception cref="T:System.ArgumentException">Thrown if the channel has no data in the domain specified by <paramref name="baseType" />.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Boolean" /> values.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.QueryData(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@,System.Double[]@)">
            <summary>
Gets the signal data as an array of <see cref="T:System.Double" /> values.
</summary>
            <param name="baseType">The domain to get the data for. </param>
            <param name="xBase"> On return, the sample interval. </param>
            <param name="xOffset"> On return, the offset of the channel data from the start of the file or query range. </param>
            <param name="data"> On return, the signal samples as an array</param>
            <exception cref="T:System.ArgumentException">Thrown if the channel has no data in the domain specified by <paramref name="baseType" />.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Double" /> values.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.QueryData(iba.ibaFilesLiteDotNet.XBaseType,System.Single@,System.Single@,System.Single[]@)">
            <summary>
Gets the signal data as an array of <see cref="T:System.Single" /> values.
</summary>
            <param name="baseType">The domain to get the data for. </param>
            <param name="xBase"> On return, the sample interval. </param>
            <param name="xOffset"> On return, the offset of the channel data from the start of the file or query range. </param>
            <param name="data"> On return, the signal samples as an array</param>
            <exception cref="T:System.ArgumentException">Thrown if the channel has no data in the domain specified by <paramref name="baseType" />.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the data samples in the channel cannot be represented by an array of  <see cref="T:System.Single" /> values.</exception>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaChannelReader.Comment2">
            <summary>
Gets the second comment of the channel, this returns an empty string if the channel has no second comment.
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaChannelReader.Comment1">
            <summary>
Gets the first comment of the channel, this returns an empty string if the channel has no first comment.
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaChannelReader.Unit">
            <summary>
Gets the unit of the data in the channel, this returns an empty string if the channel has no unit.
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaChannelReader.Name">
            <summary>
Gets name of the channel, this returns an empty string if the channel has no name.
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaChannelReader.ChannelType">
            <summary>
Gets the type of data present in the channel.
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaChannelReader.DefaultXBaseType">
            <summary>
Gets the default physical domain that the channel has data for. To check if the channel has data for other domains than the default domain, use the method <see cref="M:iba.ibaFilesLiteDotNet.IbaChannelReader.HasXBaseType(iba.ibaFilesLiteDotNet.XBaseType)" />.
</summary>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.HasXBaseType(iba.ibaFilesLiteDotNet.XBaseType)">
            <summary>
Check if the channel has data for the specified physical domain.
</summary>
            <param name="xBaseType"> The domain to check against.</param>
            <returns>
                <c>true</c> if the channel has data for the specified physical domain; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaChannelReader.NonEquidistant">
            <summary>
                <c>true</c> if the channel is non-equidistantly sampled; otherwise, <c>false</c>.
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaChannelReader.Text">
            <summary>
                <c>true</c> if the channel is a text channel; otherwise, <c>false</c>.
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaChannelReader.Digital">
            <summary>
                <c>true</c> if the channel is digital; otherwise, <c>false</c>.
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaChannelReader.Analog">
            <summary>
                <c>true</c> if the channel is analog; otherwise, <c>false</c>.
</summary>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaChannelReader.GetID">
            <summary>
Get the unique channel id.
</summary>
            <returns>The channel id.</returns>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaChannelReader.Parent">
            <summary>
Parent reader that this channel belongs to.
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaChannelReader.InfoFields">
            <summary>
A dictionary collection containing the info fields of the channel.
</summary>
        </member>
        <member name="T:iba.ibaFilesLiteDotNet.IbaChannelReader">
            <summary>
Interface representing a channel. An instance of this interface exposes the info fields of the channel and the channel data can be queried from it.
</summary>
        </member>
        <member name="T:iba.ibaFilesLiteDotNet.ChannelTypeEnum">
            <summary>
Enumeration representing the type of data a channel contains.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.ChannelTypeEnum.Unknown">
            <summary>
The type of the channel is currently unknown.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.ChannelTypeEnum.NotSupported">
            <summary>
A channel type that is not supported by this version of ibaFilesLite.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.ChannelTypeEnum.NE_Double">
            <summary>
Analog represented by double precision floating point values, non-equidistantly sampled.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.ChannelTypeEnum.NE_Int32">
            <summary>
Analog represented by 32-bit scaled integer values, non-equidistantly sampled.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.ChannelTypeEnum.NE_Int16">
            <summary>
Analog represented by 16-bit scaled integer values, non-equidistantly sampled.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.ChannelTypeEnum.NE_Real">
            <summary>
Analog represented by single precision floating point values, non-equidistantly sampled.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.ChannelTypeEnum.NE_Digital">
            <summary>
Digital, non-equidistantly sampled.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.ChannelTypeEnum.Double">
            <summary>
Analog represented by double precision floating point values, equidistantly sampled.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.ChannelTypeEnum.Int64">
            <summary>
Analog represented by 64-bit scaled integer values, equidistantly sampled.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.ChannelTypeEnum.Int32">
            <summary>
Analog represented by 32-bit scaled integer values, equidistantly sampled.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.ChannelTypeEnum.Text">
            <summary>
Texts, non-equidistantly sampled.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.ChannelTypeEnum.Int16">
            <summary>
Analog represented by 16-bit scaled integer values, equidistantly sampled.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.ChannelTypeEnum.Real">
            <summary>
Analog represented by single precision floating point values, equidistantly sampled.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.ChannelTypeEnum.Digital">
            <summary>
Digital, equidistantly sampled.
</summary>
        </member>
        <member name="T:iba.ibaFilesLiteDotNet.XBaseType">
            <summary>
Enumeration representing the physical domain channel data should be interpreted in.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.XBaseType.DEFAULT">
            <summary>
unspecified or default domain
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.XBaseType.INVLENGTH">
            <summary>
inverse length domain
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.XBaseType.FREQUENCY">
            <summary>
frequency domain
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.XBaseType.LENGTH">
            <summary>
length domain
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.XBaseType.TIME">
            <summary>
time domain
</summary>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDReader.GetVersion">
            <inheritdoc />
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaHDReader.Modules">
            <summary>
Gets the modules as a dictionary indexed on the module number.
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaHDReader.Channels">
            <summary>
Gets a list of all available channels, represented as instances of <see cref="T:iba.ibaFilesLiteDotNet.IbaChannelReader" />. The list is read-only snapshot of the current channel list.
</summary>
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server was not established or has been lost.</exception>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaHDReader.InfoFields">
            <summary>
A dictionary collection containing meta data on the HD-server and store. The dictionary is read only
This is intended to mimic the info fields collection in .dat files.
</summary>
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server was not established or has been lost.</exception>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaHDReader.RawMode">
            <inheritdoc />
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaHDReader.PortNumber">
            <summary>
Gets the specified port number
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaHDReader.ServerName">
            <summary>
Gets the specified server name
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaHDReader.StoreName">
            <summary>
Gets the specified store name
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaHDReader.ReqTime">
            <summary>
Gets the specified desired sampling interval
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaHDReader.StopTime">
            <summary>
Gets the end of the specified query range.
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaHDReader.StartTime">
            <summary>
Gets the start of the specified query range.
</summary>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDReader.QueryChannelByName(System.String)">
            <inheritdoc />
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server was not established or has been lost.</exception>
            <remarks>
If the query range or requested sampling interval is large, or if the raw level data has been purged,
the HD-server might return aggregated data rather than the raw level data. The aggregated data is either the average, maximum or minimum of a segment of lower level data.
One can add a suffix to the channel name to specify which aggregated data is desired:
<list type="bullet"><item><description>if no suffix is added, the average of the lower level segment is returned.</description></item><item><description>add "_max" as suffix to the channel name to have the maximum value of the lower level segment.</description></item><item><description>add "_min" as suffix to the channel name to have the minumum value of the lower level segment.</description></item></list></remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDReader.QueryChannelByID(iba.ibaFilesLiteDotNet.ChannelID)">
            <inheritdoc />
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server was not established or has been lost.</exception>
            <remarks>
If the query range or requested sampling interval is large, or if the raw level data has been purged,
the HD-server might return aggregated data rather than the raw level data. The aggregated data is either the average, maximum or minimum of a segment of lower level data.
One can use the <see cref="P:iba.ibaFilesLiteDotNet.ChannelID.Tag" /> property of <paramref name="id" /> to specify which aggregated data is desired:
<list type="bullet"><item><description>if left empty, the average of the lower level segment is returned.</description></item><item><description>specify "max" to have the maximum value of the lower level segment.</description></item><item><description>specify "min" to have the minumum value of the lower level segment.</description></item></list></remarks>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDReader.Close">
            <summary>
Disconnects from the HD-Server
</summary>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDReader.Open(System.String,System.String,System.String)">
            <summary>
Connects to an hd-server and sets time parameters with parameters taken from an .hdq configuration file.
</summary>
            <param name="hdqFileName">Path to the .hdq file</param>
            <param name="username">ibaHD username used for authorization.</param>
            <param name="password">ibaHD password used for authorization.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="hdqFileName" /> is <see langword="null" /></exception>
            <exception cref="T:System.IO.IOException">
                <paramref name="hdqFileName" /> includes an incorrect or invalid syntax for file name, directory name, or volume label or the file is not accessible.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the .hdq file does not appear to be correctly formatted or if <paramref name="hdqFileName" /> is empty.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the .hdq file does not contain the parameters for a time-based query.</exception>
            <exception cref="T:System.Exception">Thrown if no connection to the HD-server could be established.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDReader.Open(System.String)">
            <summary>
Connects to an hd-server and sets time parameters with parameters taken from an .hdq configuration file.
</summary>
            <param name="hdqFileName">Path to the .hdq file</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="hdqFileName" /> is <see langword="null" /></exception>
            <exception cref="T:System.IO.IOException">
                <paramref name="hdqFileName" /> includes an incorrect or invalid syntax for file name, directory name, or volume label or the file is not accessible.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the .hdq file does not appear to be correctly formatted or if <paramref name="hdqFileName" /> is empty.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the .hdq file does not contain the parameters for a time-based query.</exception>
            <exception cref="T:System.Exception">Thrown if no connection to the HD-server could be established.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDReader.SetTimeQueryParameters(System.String,System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
Method to set the parameters for data queries.
</summary>
            <param name="storeName">The name of the HD store, the store needs to be a time store.</param>
            <param name="start">Start of the query range, local time</param>
            <param name="stop">End of the query range, local time</param>
            <param name="requestedTimeBase">The desired sampling interval. 
The actual sampling interval returned by subsequent queries will depend on the sampling levels available on the HD-server but will be as close as possible as the specified interval.
Specify <see cref="F:System.TimeSpan.Zero" /> to have ibaFiles select an appropriate sampling interval automatically.
</param>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDReader.SetTimeQueryParameters(iba.ibaFilesLiteDotNet.IbaHDStore,System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
Method to set the parameters for data queries.
</summary>
            <param name="timeStore">The HD store specified as an  <see cref="T:iba.ibaFilesLiteDotNet.IbaHDStore" /> object, needs to be a time store.</param>
            <param name="start">Start of the query range, local time</param>
            <param name="stop">End of the query range, local time</param>
            <param name="requestedTimeBase">The desired sampling interval. 
The actual sampling interval returned by subsequent queries will depend on the sampling levels available on the HD-server but will be as close as possible as the specified interval.
Specify <see cref="F:System.TimeSpan.Zero" /> to have ibaFiles select an appropriate sampling interval automatically.
</param>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDReader.GetStores(iba.ibaFilesLiteDotNet.IbaHDStoreType)">
            <summary>
Method to list the stores, filtered on type of store.
</summary>
            <param name="storeType">Store type to filter on.</param>
            <returns>A list of <see cref="T:iba.ibaFilesLiteDotNet.IbaHDStore" /> objects, representing the available stores.</returns>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDReader.GetStores">
            <summary>
Method to list the stores, all types of stores are returned.
</summary>
            <returns>A list of <see cref="T:iba.ibaFilesLiteDotNet.IbaHDStore" /> objects, representing the available stores.</returns>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDReader.Connect(System.String,System.Int32,System.String,System.String)">
            <summary>
Method to connect to an HD-server
</summary>
            <param name="server">Hostname of the HD-server</param>
            <param name="portNumber">Number of the port to communicate with the HD-server</param>
            <param name="username">ibaHD username used for authorization.</param>
            <param name="password">ibaHD password used for authorization.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="server" /> is <see langword="null" /></exception>
            <exception cref="T:System.Exception">Thrown if no connection to the HD-server could be established.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDReader.Connect(System.String,System.Int32)">
            <summary>
Method to connect to an HD-server
</summary>
            <param name="server">Hostname of the HD-server</param>
            <param name="portNumber">Number of the port to communicate with the HD-server</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="server" /> is <see langword="null" /></exception>
            <exception cref="T:System.Exception">Thrown if no connection to the HD-server could be established.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDReader.#ctor(System.String,System.String,System.String)">
            <summary>
Initializes a new instance of the IbaFileReader class with a specified .hdq file to open.
</summary>
            <param name="hdqFileName">The .hdq file to open.</param>
            <param name="username">ibaHD username used for authorization.</param>
            <param name="password">ibaHD password used for authorization.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="hdqFileName" /> is <see langword="null" /></exception>
            <exception cref="T:System.IO.IOException">
                <paramref name="hdqFileName" /> includes an incorrect or invalid syntax for file name, directory name, or volume label or the file is not accessible.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the .hdq file does not appear to be correctly formatted or if <paramref name="hdqFileName" /> is empty.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the .hdq file does not contain the parameters for a time-based query.</exception>
            <exception cref="T:System.Exception">Thrown if no connection to the HD-server could be established.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDReader.#ctor(System.String)">
            <summary>
Initializes a new instance of the IbaFileReader class with a specified .hdq file to open.
</summary>
            <param name="hdqFileName">The .hdq file to open.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="hdqFileName" /> is <see langword="null" /></exception>
            <exception cref="T:System.IO.IOException">
                <paramref name="hdqFileName" /> includes an incorrect or invalid syntax for file name, directory name, or volume label or the file is not accessible.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the .hdq file does not appear to be correctly formatted or if <paramref name="hdqFileName" /> is empty.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the .hdq file does not contain the parameters for a time-based query.</exception>
            <exception cref="T:System.Exception">Thrown if no connection to the HD-server could be established.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaHDReader.#ctor">
            <summary>
Default constructor
</summary>
        </member>
        <member name="T:iba.ibaFilesLiteDotNet.IbaHDReader">
            <summary>
Main class to read HD data.
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaHDStore.StoreType">
            <summary>
Gets the store type
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaHDStore.StoreName">
            <summary>
Gets the store name
</summary>
        </member>
        <member name="T:iba.ibaFilesLiteDotNet.IbaHDStore">
            <summary>
Class representing an HD-store
</summary>
        </member>
        <member name="T:iba.ibaFilesLiteDotNet.IbaHDStoreType">
            <summary>
Enumeration representing the type of an HD-store
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.IbaHDStoreType.Event">
            <summary>
Event based HD-store.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.IbaHDStoreType.Length">
            <summary>
Length based HD-store.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.IbaHDStoreType.Time">
            <summary>
Time based HD-store.
</summary>
        </member>
        <member name="F:iba.ibaFilesLiteDotNet.IbaHDStoreType.All">
            <summary>
All types of HD-store.
</summary>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileReader.ReadShortFileInfo(System.String)">
            <summary>
Read information from a .dat file fast without parsing the complete header.
</summary>
            <param name="fileName">The .dat file to read the information from.</param>
            <returns>The short file information or null in case the file couldn't be opened or wasn't a supported .dat file.</returns>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileReader.ListEmbeddedFileInfo">
            <summary>
Retrieves information about all embedded files in the .dat file.
</summary>
            <exception cref="T:System.InvalidOperationException">Thrown if currently no file is open.</exception>
            <returns>A list containing information about the embedded files. If no embedded files were found, the returned list is empty.</returns>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileReader.GetVersion">
            <inheritdoc />
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileReader.GetMeasuringLocations(iba.ibaFilesLiteDotNet.XBaseType)">
            <summary>
Creates a list of measuring locations contained in this QDR .dat file.
</summary>
            <param name="xType">The xType of the channels in the measuring locations. This is only relevant for QDR v6 files. In QDR v7 files there are no separate signals for length and time.</param>
            <returns>If this is a QDR .dat file then a list containing information about the measuring locations is returned. If this is not a QDR .dat file then <see langword="null" /> is returned.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if currently no file is open.</exception>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaFileReader.Modules">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if currently no file is open.</exception>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaFileReader.Channels">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if currently no file is open.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileReader.QueryChannelByName(System.String)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if currently no file is open.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileReader.QueryChannelByID(iba.ibaFilesLiteDotNet.ChannelID)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Thrown if currently no file is open.</exception>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaFileReader.PreLoad">
            <summary>
Property to enable/disable preloading of the .dat file. When this mode is enabled, ibaFiles tries to force windows to load the entire .dat file in the file system cache. 
This greatly improves performance when a large number of signals need to be queried.
Set this property BEFORE opening a .dat file.
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaFileReader.RawMode">
            <inheritdoc />
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaFileReader.EndTime">
            <summary>
Gets the end time of the file
</summary>
            <exception cref="T:System.InvalidOperationException">Thrown if currently no file is open.</exception>
            <exception cref="T:System.FormatException">Thrown if start time isn't in a valid format.</exception>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaFileReader.StartTime">
            <summary>
Gets the start time of the file
</summary>
            <exception cref="T:System.InvalidOperationException">Thrown if currently no file is open.</exception>
            <exception cref="T:System.FormatException">Thrown if start time isn't in a valid format.</exception>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaFileReader.InfoFields">
            <summary>
A dictionary collection containing the infofields of the .dat files. If you opened the .dat file in OpenForUpdate mode, you'll be able to modify the collection; otherwise, the collection is read-only.
</summary>
            <exception cref="T:System.InvalidOperationException">Thrown if currently no file is open.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileReader.Close">
            <summary>
Close the .dat file.
</summary>
            <exception cref="T:System.InvalidOperationException">Thrown if file wasn't opened previously.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileReader.OpenForUpdate(System.String,System.String)">
            <summary>
Initializes a new instance of the IbaFileReader class with a specified .dat file to open, infofields can be added or modified when opening with this function.
</summary>
            <param name="fileName">The .dat file to open</param>
            <param name="password">The password required to open the .dat file</param>
            <exception cref="T:System.InvalidOperationException">Thrown if a previous file was opened without it being closed.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown if the file could not be opened because the file does not exist or an operating system error happened.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="fileName" /> is empty or <see langword="null" />.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the file is in an unsupported format.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileReader.OpenForUpdate(System.String)">
            <summary>
Initializes a new instance of the IbaFileReader class with a specified .dat file to open, infofields can be added or modified when opening with this function.
</summary>
            <param name="fileName">The .dat file to open</param>
            <exception cref="T:System.InvalidOperationException">Thrown if a previous file was opened without it being closed.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown if the file could not be opened because the file does not exist or an operating system error happened.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="fileName" /> is empty or <see langword="null" />.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the file is in an unsupported format.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileReader.Open(System.String,System.String)">
            <summary>
Initializes a new instance of the IbaFileReader class with a specified .dat file to open, the .dat file will be opened in read-only mode.
</summary>
            <param name="fileName">The .dat file to open</param>
            <param name="password">The password required to open the .dat file</param>
            <exception cref="T:System.InvalidOperationException">Thrown if a previous file was opened without it being closed.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown if the file could not be opened because the file does not exist or an operating system error happened.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="fileName" /> is empty or <see langword="null" />.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the file is in an unsupported format.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileReader.Open(System.String)">
            <summary>
Initializes a new instance of the IbaFileReader class with a specified .dat file to open, the .dat file will be opened in read-only mode.
</summary>
            <param name="fileName">The .dat file to open</param>
            <exception cref="T:System.InvalidOperationException">Thrown if a previous file was opened without it being closed.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown if the file could not be opened because the file does not exist or an operating system error happened.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="fileName" /> is empty or <see langword="null" />.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the file is in an unsupported format.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileReader.Finalize">
            <summary> Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</summary>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileReader.#ctor(System.String,System.String,System.Boolean)">
            <summary>
Initializes a new instance of the IbaFileReader class with a specified .dat file to open and a specified mode to open it.
</summary>
            <param name="fileName">The .dat file to open</param>
            <param name="password">The password required to read the .dat file</param>
            <param name="openForUpdate">If <c>true</c>, infofields can be modified or added to the .dat file; otherwise, the .dat file will be opened read-only.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown if the file could not be opened because the file does not exist or an operating system error happened.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the file is not a valid iba .dat file.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the file is in an unsupported format.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileReader.#ctor(System.String,System.Boolean)">
            <summary>
Initializes a new instance of the IbaFileReader class with a specified .dat file to open and a specified mode to open it.
</summary>
            <param name="fileName">The .dat file to open</param>
            <param name="openForUpdate">If <c>true</c>, infofields can be modified or added to the .dat file; otherwise, the .dat file will be opened read-only.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown if the file could not be opened because the file does not exist or an operating system error happened.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the file is not a valid iba .dat file.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the file is in an unsupported format.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaFileReader.#ctor">
            <summary>
Default constructor
</summary>
        </member>
        <member name="T:iba.ibaFilesLiteDotNet.IbaFileReader">
            <summary>
Main class to open .dat files. An instance of this class exposes the info fields and channels in an opened .dat file.
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaReader.Modules">
            <summary>
Gets a list of all available modules, represented as instances of <see cref="T:iba.ibaFilesLiteDotNet.IbaModuleReader" />. The list is read-only.
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaReader.Channels">
            <summary>
Gets a list of all available channels, represented as instances of <see cref="T:iba.ibaFilesLiteDotNet.IbaChannelReader" />. The list is read-only.
</summary>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaReader.QueryChannelByName(System.String)">
            <summary>
Query a channel by name.
</summary>
            <param name="name">Name of the channel you want to query.</param>
            <returns>An instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaChannelReader" /> that enables access to the channel with the specified name. If no such channel is present, this method returns <see langword="null" />.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaReader.QueryChannelByID(iba.ibaFilesLiteDotNet.ChannelID)">
            <summary>
Query a channel by ID.
</summary>
            <param name="id">Instance of <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> that represents the channel ID</param>
            <returns>An instance of <see cref="T:iba.ibaFilesLiteDotNet.IbaChannelReader" /> that enables access to the channel with the specified ID. If no such channel is present, this method returns <see langword="null" />.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the specified id is not valid (See <see cref="P:iba.ibaFilesLiteDotNet.ChannelID.Valid" />).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="id" /> is <see langword="null" />.</exception>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaReader.RawMode">
            <summary>
Property to enable/disable raw mode data reading. Raw mode returns the data unscaled and in the data format the channel is in (boolean, 16 or 32 bit integer).
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaReader.StartTime">
            <summary>
Property to get the start time of the .dat file or requested query range.
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaReader.InfoFields">
            <summary>
Gets the global infofields.
</summary>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaReader.Close">
            <summary>
Closes the .dat file or disconnects from the HD-server.
</summary>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaReader.Open(System.String)">
            <summary>
Initializes a new instance with a specified file to open.
</summary>
            <param name="fileName">The .dat file to open</param>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.IbaReader.GetVersion">
            <summary>
Get version information.
</summary>
            <returns>Version of ibaFiles.</returns>
        </member>
        <member name="T:iba.ibaFilesLiteDotNet.IbaReader">
            <summary>
Main interface to read iba data.
</summary>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.ChannelID.op_LessThanOrEqual(iba.ibaFilesLiteDotNet.ChannelID,iba.ibaFilesLiteDotNet.ChannelID)">
            <summary>
Determines whether instance <paramref name="a" /> of <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> comes before instance <paramref name="b" /> of <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> in the sort order or they are equal.
</summary>
            <param name="a">The first id to compare.</param>
            <param name="b">The second id to compare.</param>
            <returns>
                <c>true</c> if <paramref name="a" /> comes before <paramref name="b" /> in the sort order or they are equal, <c>false</c> otherwise.
</returns>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.ChannelID.op_GreaterThanOrEqual(iba.ibaFilesLiteDotNet.ChannelID,iba.ibaFilesLiteDotNet.ChannelID)">
            <summary>
Determines whether instance <paramref name="a" /> of <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> comes after instance <paramref name="b" /> of <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> in the sort order or they are equal.
</summary>
            <param name="a">The first id to compare.</param>
            <param name="b">The second id to compare.</param>
            <returns>
                <c>true</c> if <paramref name="a" /> comes after <paramref name="b" /> in the sort order or they are equal, <c>false</c> otherwise.
</returns>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.ChannelID.op_GreaterThan(iba.ibaFilesLiteDotNet.ChannelID,iba.ibaFilesLiteDotNet.ChannelID)">
            <summary>
Determines whether instance <paramref name="a" /> of <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> comes after instance <paramref name="b" /> of <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> in the sort order.
</summary>
            <param name="a">The first id to compare.</param>
            <param name="b">The second id to compare.</param>
            <returns>
                <c>true</c> if <paramref name="a" /> comes after <paramref name="b" /> in the sort order, <c>false</c> otherwise.
</returns>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.ChannelID.op_LessThan(iba.ibaFilesLiteDotNet.ChannelID,iba.ibaFilesLiteDotNet.ChannelID)">
            <summary>
Determines whether instance <paramref name="a" /> of <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> comes before instance <paramref name="b" /> of <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> in the sort order.
</summary>
            <param name="a">The first id to compare.</param>
            <param name="b">The second id to compare.</param>
            <returns>
                <c>true</c> if <paramref name="a" /> comes before <paramref name="b" /> in the sort order, <c>false</c> otherwise.
</returns>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.ChannelID.op_Inequality(iba.ibaFilesLiteDotNet.ChannelID,iba.ibaFilesLiteDotNet.ChannelID)">
            <summary>
Determines whether the specified <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> instances identify different channels.
</summary>
            <param name="a">The first id to compare, or <see langword="null" />.</param>
            <param name="b">The second id to compare, or <see langword="null" />.</param>
            <returns>
                <c>true</c> if <paramref name="a" /> identifies another channel than <paramref name="b" />; otherwise, <c>false</c>.
If both <paramref name="a" /> and <paramref name="b" /> are <see langword="null" />, the method returns <c>false</c>.
</returns>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.ChannelID.op_Equality(iba.ibaFilesLiteDotNet.ChannelID,iba.ibaFilesLiteDotNet.ChannelID)">
            <summary>
Determines whether the specified <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> instances identify the same channel.
</summary>
            <param name="a">The first id to compare, or <see langword="null" />.</param>
            <param name="b">The second id to compare, or <see langword="null" />.</param>
            <returns>
                <c>true</c> if <paramref name="a" /> identifies the same channel as <paramref name="b" />; otherwise, <c>false</c>.
If both <paramref name="a" /> and <paramref name="b" /> are <see langword="null" />, the method returns <c>true</c>.
</returns>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.ChannelID.CompareTo(iba.ibaFilesLiteDotNet.ChannelID)">
            <summary>
Compares the current instance with another instance of <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" />.
</summary>
            <param name="other">Another instance of <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> to compare with this instance.</param>
            <returns> A value that indicates the relative order of the <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> instances being compared. 
The return value has the following meanings: 
<para /><list type="table"><listheader><term>Value</term><term>Meaning</term></listheader><item><term>Less than zero</term><term>This instances precedes <paramref name="other" /> in the sort order.</term></item><item><term>Zero</term><term>This instance occurs in the same position in the sort order as <paramref name="other" />.</term></item><item><term>Greater than zero</term><term>This instance follows <paramref name="other" />  in the sort order.</term></item></list></returns>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.ChannelID.Equals(iba.ibaFilesLiteDotNet.ChannelID,iba.ibaFilesLiteDotNet.ChannelID)">
            <summary>
Determines whether the specified <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> instances identify the same channel.
</summary>
            <param name="a">The first id to compare, or <see langword="null" />.</param>
            <param name="b">The second id to compare, or <see langword="null" />.</param>
            <returns>
                <c>true</c> if <paramref name="a" /> identifies the same channel as <paramref name="b" />; otherwise, <c>false</c>.
If both <paramref name="a" /> and <paramref name="b" /> are <see langword="null" />, the method returns <c>true</c>.
</returns>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.ChannelID.Equals(iba.ibaFilesLiteDotNet.ChannelID)">
            <summary>
Determines whether this instance and another specified <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> identify the same channel.
</summary>
            <param name="id">The id to compare to this instance.</param>
            <returns>
                <c>true</c> if <paramref name="id" /> identifies the same channel as this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.ChannelID.Equals(System.Object)">
            <summary>
Determines whether this instance and a specified object, which must also be a <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" />, identify the same channel.
</summary>
            <param name="obj"> The <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> to compare to this instance.</param>
            <returns>
                <c>true</c> if <paramref name="obj" /> is a <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> and identifies the same channel as this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.ChannelID.TryParse(System.String,iba.ibaFilesLiteDotNet.ChannelID@)">
            <summary>
Converts the string representation of a channel id to an instance of ChannelID. 
A return value indicates whether the conversion succeeded or failed.
</summary>
            <param name="s">A string representing an id to convert</param>
            <param name="result">On return, contains the new <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> that is equivalent to <paramref name="s" /></param>
            <returns>
                <c>true</c> if arg was converted successfully; otherwise, <c>false</c> .</returns>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.ChannelID.Parse(System.String)">
            <summary>
Converts the string representation of a channel id to an instance of ChannelID. 
</summary>
            <param name="s">A string representing an id to convert</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="s" /> is <see langword="null" /></exception>
            <exception cref="T:System.FormatException">
                <paramref name="s" /> is not in a format recognised as a channel id</exception>
            <returns>A new <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> that is equivalent to <paramref name="s" /></returns>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.ChannelID.GetHashCode">
            <summary>
Hash function
</summary>
            <returns>A value that can be used as hash code for the current instance.</returns>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.ChannelID.ToString">
            <summary>
Converts this instance to its equivalent string representation.
</summary>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.ChannelID.Tag">
            <summary>
Gets or sets the "tag" of the channel identified by this <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" />
A channel with a nonempty tag is a sub-channel of a similar channel without a tag.
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.ChannelID.Valid">
            <summary>
This property is <c>true</c> if the instance is a valid channel id; otherwise, it is <c>false</c>.
</summary>
            <remarks>
Validity of a channel id isn't checked during the construction of the id or while setting properties.
It is postponed until the id is used in an ibaFiles method, upon which that method will throw an exception.
You can check the validity of an id prior to using it in a method with this property.
<para />Because a channel id is internally in ibaFiles encoded as a 32-bit integer, 
the validity of <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> is  determined by the sizes of <see cref="P:iba.ibaFilesLiteDotNet.ChannelID.ModuleNumber" />, <see cref="P:iba.ibaFilesLiteDotNet.ChannelID.NumberInModule" /> and <see cref="P:iba.ibaFilesLiteDotNet.ChannelID.SubChannelNumber" />.
<para />For a channel not belonging to a submodule the limits are:
<para /><list type="table"><listheader><term><see cref="P:iba.ibaFilesLiteDotNet.ChannelID.ModuleNumber" /></term><term><see cref="P:iba.ibaFilesLiteDotNet.ChannelID.NumberInModule" /></term></listheader><item><term>0 ≤ <c>value</c> &lt; 2<sup>13</sup></term><term>0 ≤ <c>value</c> &lt; 2<sup>16</sup></term></item><item><term>2<sup>13</sup> ≤ <c>value</c> &lt; 2<sup>23</sup></term><term>0 ≤ <c>value</c> &lt; 2<sup>5</sup></term></item></list><para />For a channel belonging to a submodule the limits are:
<para /><list type="table"><listheader><term><see cref="P:iba.ibaFilesLiteDotNet.ChannelID.ModuleNumber" /></term><term><see cref="P:iba.ibaFilesLiteDotNet.ChannelID.NumberInModule" /></term><term><see cref="P:iba.ibaFilesLiteDotNet.ChannelID.SubChannelNumber" /></term></listheader><item><term>0 ≤ <c>value</c> &lt; 2<sup>13</sup></term><term>0 ≤ <c>value</c> &lt; 2<sup>6</sup></term><term>0 ≤ <c>value</c> &lt; 2<sup>9</sup></term></item><item><term>0 ≤ <c>value</c> &lt; 2<sup>13</sup></term><term>2<sup>6</sup> ≤ <c>value</c> &lt; 2<sup>11</sup></term><term>0 ≤ <c>value</c> &lt; 2<sup>4</sup></term></item></list></remarks>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.ChannelID.ExpressionNumber">
            <summary>
Gets or sets the index of the channel identified by this <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> in the expression list.
This property equals <c>-1</c> if the channel isn't an expression.
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.ChannelID.IsExpression">
            <summary>
Gets or sets whether or not this channel is an expression. 
In case it is an expression then only  <see cref="P:iba.ibaFilesLiteDotNet.ChannelID.ModuleNumber" /> and <see cref="P:iba.ibaFilesLiteDotNet.ChannelID.NumberInModule" /> aren't relevant, only the expression number is relevant.
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.ChannelID.IsSubChannel">
            <summary>
Gets or sets whether or not this channel belongs to a submodule.
A channel with a nonempty tag is a sub-channel of a similar channel without a tag.
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.ChannelID.DigitalSort">
            <summary>
Gets or sets whether or not the channel identified by this <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> is belongs to a submodule that is considered digital.
The property is <c>true</c> if this <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> identifies a channel belonging to a digital submodule; otherwise it is<c>false</c>.
</summary>
            <remarks>
Setting this property automatically indicates that the identified channel belongs to a submodule.
The property returns <c>false</c> if the identified channel does not belong to a submodule.
</remarks>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.ChannelID.Digital">
            <summary>
Gets or sets whether or not the channel identified by this <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> is a digital channel.
The property is <c>true</c> if this <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> identifies a digital channel; otherwise, it is <c>false</c>.
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.ChannelID.SubChannelNumber">
            <summary>
Gets or sets the index of the channel identified by this <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> in the submodule.
This property equals <c>-1</c> if the channel does not belong to a submodule.
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.ChannelID.NumberInModule">
            <summary>
Gets or sets the index of the channel identified by this <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> in the parent module.
If the channel belongs to a submodule, this property is the index of the submodule in the parent module.
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.ChannelID.ModuleNumber">
            <summary>
Gets or sets the number of the module of the parent module the channel identified by this <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> belongs to.
If the channel belongs to a submodule, this property is the number of the top parent module and not the submodule.
</summary>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.ChannelID.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
Constructs a <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> for a channel belonging to a submodule (e.g. a connector for dig512 modules or a measurement location for qdr files).
The submodule is considered to be an analog submodule.
</summary>
            <param name="moduleNumber">Number of the parent module the submodule belongs to.</param>
            <param name="numberInModule">Index of the submodule in the parent module.</param>
            <param name="subChannelNumber">Index of the channel identified by this <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> in the submodule.</param>
            <param name="digital">Specify <c>true</c> if this <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> identifies a digital channel; otherwise, specify <c>false</c>.</param>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.ChannelID.#ctor(System.Int32,System.Int32,System.Boolean,System.Int32,System.Boolean)">
            <summary>
Constructs a <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> for a channel belonging to a submodule (e.g. a connector for dig512 modules or a measurement location for qdr files).
</summary>
            <param name="moduleNumber">Number of the parent module the submodule belongs to. </param>
            <param name="numberInModule">Index of the submodule in the parent module.</param>
            <param name="digitalSort">Specify <c>true</c> if the submodule should be considered a 'digital' module; otherwise, specify <c>false</c></param>
            <param name="subChannelNumber">Index of the channel identified by this <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> in the submodule.</param>
            <param name="digital">Specify <c>true</c> if this  <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> identifies a digital channel; otherwise specify <c>false</c>. </param>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.ChannelID.#ctor(System.Int32,System.Int32,System.Boolean,System.Int32,System.Boolean,System.String)">
            <summary>
Constructs a <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> for a channel belonging to a submodule (e.g. a connector for dig512 modules or a measurement location for qdr files).
</summary>
            <param name="moduleNumber">Number of the parent module the submodule belongs to. </param>
            <param name="numberInModule">Index of the submodule in the parent module.</param>
            <param name="digitalSort">Specify <c>true</c> if the submodule should be considered a 'digital' module; otherwise, specify <c>false</c></param>
            <param name="subChannelNumber">Index of the channel identified by this <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> in the submodule.</param>
            <param name="digital">Specify <c>true</c> if this  <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> identifies a digital channel, otherwise, specify <c>false</c>. </param>
            <param name="tag"> 
Tag of the channel identified by this <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" />; a tagged channel appears as subchannel of an untagged channel in ibaAnalyzer. 
Specify <see langword="null" />, an empty <see cref="T:System.String" /> or use the constructor without this parameter to indicate an untagged channel.
</param>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.ChannelID.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
Constructs a <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" />.
</summary>
            <param name="moduleNumber">Number of the parent module the channel identified by this <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> belongs to. </param>
            <param name="numberInModule">Index of the channel identified by this <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> in the parent module. </param>
            <param name="digital">Specify <c>true</c> if this  <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> identifies a digital channel; otherwise, specify <c>false</c>. </param>
        </member>
        <member name="M:iba.ibaFilesLiteDotNet.ChannelID.#ctor(System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
Constructs a <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" />.
</summary>
            <param name="moduleNumber">Number of the parent module the channel identified by this <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> belongs to. </param>
            <param name="numberInModule">Index of the channel identified by this <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> in the parent module. </param>
            <param name="digital">Specify <c>true</c> if this  <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" /> identifies a digital channel; otherwise, specify <c>false</c>. </param>
            <param name="tag"> 
Tag of the channel identified by this <see cref="T:iba.ibaFilesLiteDotNet.ChannelID" />; a tagged channel appears as subchannel of an untagged channel in ibaAnalyzer. 
Specify <see langword="null" />, an empty <see cref="T:System.String" /> or use the constructor without this parameter to indicate an untagged channel.
</param>
        </member>
        <member name="T:iba.ibaFilesLiteDotNet.ChannelID">
            <summary>
Class representing a channel id. A channel id is a unique identifier used to retrieve a channel from an iba .dat file.
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaModuleReader.Name">
            <summary>
Gets the module name
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaModuleReader.IconIndex">
            <summary>
Gets the index of the module icon in imagelists (System.Windows.Forms.ImageList) used in iba products.
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaModuleReader.ModuleNumber">
            <summary>
Gets the module number
</summary>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaModuleReader.Channels">
            <summary>
Gets a list of all available channels, represented as instances of <see cref="T:iba.ibaFilesLiteDotNet.IbaChannelReader" />. The list is read-only.
</summary>
            <exception cref="T:System.InvalidOperationException">Thrown if currently no file is open. (.dat file mode</exception>
            <exception cref="T:System.Exception">Thrown if the connection to the HD-server was not established or has been lost (HD mode)</exception>
        </member>
        <member name="P:iba.ibaFilesLiteDotNet.IbaModuleReader.InfoFields">
            <summary>
A dictionary collection containing the infofields of the module. If you opened the .dat file in OpenForUpdate mode, you'll be able to modify the collection; otherwise, the collection is read-only.
If you connected to data through an HD-server, the collection is read-only.
</summary>
            <exception cref="T:System.InvalidOperationException">Thrown if currently no file is open.</exception>
        </member>
        <member name="T:iba.ibaFilesLiteDotNet.IbaModuleReader">
            <summary>
Class that allows access to a module's info fields and channels.
</summary>
        </member>
    </members>
</doc>