<?xml version="1.0"?>
<doc>
    <assembly>
        <name>hdClientInterfaces</name>
    </assembly>
    <members>
        <member name="T:iba.HD.Client.Interfaces.HdNumericDataMode">
            <summary>
            Determines data type that is used in analog and digital channel data iterators
            </summary>
        </member>
        <member name="T:iba.HD.Client.Interfaces.IHdChannelManager">
            <summary>
            Manages HD channel references for a single HD client
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdChannelManager.NumericDataMode">
            <summary>
            Gets or sets channel data scaling and conversion mode
            </summary>
            <remarks>
            Changing this property clears all cached channel data
            </remarks>
        </member>
        <member name="E:iba.HD.Client.Interfaces.IHdChannelManager.ReferencesChanged">
            <summary>
            Called when reference is added or removed
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdChannelManager.AddReferences(System.String[])">
            <summary>
            Returns channels for the given ids and increases their reference count
            </summary>
            <returns>
            Null at error id indices
            </returns>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdChannelManager.RemoveReferences(System.String[])">
            <summary>
            Decreases reference count for channels with given ids
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdChannelManager.Contains(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Does a channel with one of the given IDs exist?
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdChannelManager.ContainsActive(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Does an active (advancing) channel with one of the given IDs exist?
            </summary>
        </member>
        <member name="T:iba.HD.Client.Interfaces.IHdChannel">
            <summary>
            A HD channel used to request data
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdChannel.Type">
            <summary>
            Channel type
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdChannel.Id">
            <summary>
            Id of the channel
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdChannel.Valid">
            <summary>
            Is the channel valid?
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdChannel.Active">
            <summary>
            Is the channel being written?
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdChannel.VisualMin">
            <summary>
            Minimal visual value. NaN if unavailable.
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdChannel.VisualMax">
            <summary>
            Maximal visual value. NaN if unavailable.
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdChannel.ExecuteRequest(System.Int32)">
            <summary>
            Executes a previously added request
            </summary>
            <param name="requestId">
            id of the request to be executed
            </param>
            <exception cref="T:System.ArgumentException">
            Unknown request id
            </exception>
            <exception cref="T:System.ArgumentException">
            Request already in progress
            </exception>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdTimeChannel.AddRequest(System.Int64,System.Int64,System.Int32,System.Boolean,System.Action{System.Int32,iba.HD.Client.Interfaces.IHdTimeIterator})">
            <summary>
            Used to requests channel data with dynamic data level
            </summary>
            <param name="start">
            Time range start stamp
            </param>
            <param name="stop">
            Time range stop stamp
            </param>
            <param name="pixelRange">
            axis range in pixels
            </param>
            <param name="scroll">
            If true, the requested time range is expected to be 'newer' than previously requested
            time ranges; otherwise the time range is unrelated to previously requested time ranges
            </param>
            <param name="callback">
            Delegate that is called when the requested data has arrived
            </param>
            <returns>
            Request id that will be passed to callback
            </returns>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdTimeChannel.AddLevelRequest(System.Int64,System.Int64,System.Byte,System.Boolean,System.Action{System.Int32,iba.HD.Client.Interfaces.IHdTimeIterator})">
            <summary>
            Used to requests channel data with fixed data level
            </summary>
            <param name="start">
            Time range start stamp
            </param>
            <param name="stop">
            Time range stop stamp
            </param>
            <param name="level">
            data level
            </param>
            <param name="scroll">
            If true, the requested time range is expected to be 'newer' than previously requested
            time ranges; otherwise the time range is unrelated to previously requested time ranges
            </param>
            <param name="callback">
            Delegate that is called when the requested data has arrived
            </param>
            <returns>
            Request id that will be passed to callback
            </returns>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdTimeChannel.AddOfflineRequest(System.Int64,System.Int64,System.Int64,iba.HD.Client.Interfaces.HdTimeAggregate,System.Action{System.Int32,iba.HD.Client.Interfaces.IHdTimeIterator,iba.HD.Client.Interfaces.IHdTimeIterator,iba.HD.Client.Interfaces.IHdTimeIterator},System.Int64)">
            <summary>
            Used to requests channel data for offline viewing
            </summary>
            <param name="start">
            Time range start stamp
            </param>
            <param name="stop">
            Time range stop stamp
            </param>
            <param name="timebase">
            Desired timebase of requested data
            </param>
            <param name="aggregate">
            Requested aggregates
            </param>
            <param name="callback">
            Delegate that is called when the requested data has arrived;
            param 1 = request id;
            param 2 = avg iterator;
            param 3 = min iterator: null if not requested or when iterating raw data;
            param 4 = max iterator: null if not requested or when iterating raw data;
            </param>
            <param name="maxBytes">
            Data is returned untill the total amount of returned bytes is larger than 'maxBytes'
            </param>
            <returns>
            Request id that will be passed to callback
            </returns>
            <remarks>
            Callback id == ~id to specify end of request
            </remarks>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdTextChannel.AddRequest(System.Int64,System.Int64,System.Int32,System.Boolean,System.Action{System.Int32,iba.HD.Client.Interfaces.IHdIterator})">
            <summary>
            Used to requests channel data
            </summary>
            <param name="start">
            Time range start stamp
            </param>
            <param name="stop">
            Time range stop stamp
            </param>
            <param name="pixelRange">
            axis range in pixels
            </param>
            <param name="scroll">
            If true, the requested time range is expected to be 'newer' than previously requested
            time ranges; otherwise the time range is unrelated to previously requested time ranges
            </param>
            <param name="callback">
            Delegate that is called when the requested data has arrived
            </param>
            <returns>
            Request id that will be passed to callback
            </returns>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdLengthChannel.AddLengthRequest(System.Int64,System.Int64,System.Boolean,System.Action{System.Int32,iba.HD.Client.Interfaces.IHdLengthIterator})">
            <summary>
            Used to requests channel data
            </summary>
            <param name="start">
            Length range start stamp
            </param>
            <param name="stop">
            Length range stop stamp
            </param>
            <param name="scroll">
            If true, the requested time range is expected to be 'newer' than previously requested
            time ranges; otherwise the time range is unrelated to previously requested time ranges
            </param>
            <param name="callback">
            Delegate that is called when the requested data has arrived
            </param>
            <returns>
            Request id that will be passed to callback
            </returns>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdLengthChannel.AddTimeRequest(System.Int64,System.Int64,System.Boolean,System.Action{System.Int32,iba.HD.Client.Interfaces.IHdLengthIterator})">
            <summary>
            Used to requests channel data
            </summary>
            <param name="start">
            Time range start stamp
            </param>
            <param name="stop">
            Time range stop stamp
            </param>
            <param name="scroll">
            If true, the requested time range is expected to be 'newer' than previously requested
            time ranges; otherwise the time range is unrelated to previously requested time ranges
            </param>
            <param name="callback">
            Delegate that is called when the requested data has arrived
            </param>
            <returns>
            Request id that will be passed to callback
            </returns>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdLengthChannel.AddSpanRequest(System.Int64,System.Int64,iba.HD.Client.Interfaces.HdLengthAlign,System.Action{System.Int32,iba.HD.Client.Interfaces.IHdLengthIterator})">
            <summary>
            Used to requests channel data
            </summary>
            <param name="timeStamp">
            Requested time stamp
            </param>
            <param name="lengthSpan">
            Requested length span
            </param>
            <param name="align">
            Start = span located after time stamp
            Center = span located around time stamp
            Stop = span located before time stamp
            </param>
            <param name="callback">
            Delegate that is called when the requested data has arrived
            </param>
            <returns>
            Request id that will be passed to callback
            </returns>
        </member>
        <member name="T:iba.HD.Client.Interfaces.IHdChannelDetails">
            <summary>
            Channel details that can change over time
            </summary>
        </member>
        <member name="T:iba.HD.Client.Interfaces.IHdChannelValue">
            <summary>
            HD channel data value
            </summary>
        </member>
        <member name="T:iba.HD.Client.Interfaces.IHdChannelValue`1">
            <summary>
            Generic HD channel data value
            </summary>
        </member>
        <member name="T:iba.HD.Client.Interfaces.IHdIterator">
            <summary>
            HD data iterator
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdIterator.ChannelId">
            <summary>
            Id of the channel
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdIterator.Details">
            <summary>
            Gets the newest details in the range
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdIterator.SampleCount">
            <summary>
            Amount of samples in the iterator
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdIterator.XStart">
            <summary>
            Time stamp of first sample
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdIterator.XStop">
            <summary>
            Times tamp of last sample, including the duration it is valid
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdIterator.X">
            <summary>
            Current sample time stamp
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdIterator.Y">
            <summary>
            Current sample value
            </summary>
            <remarks>
            One and the same object instance lives during entire iterator lifetime
            </remarks>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdIterator.Next">
            <summary>
            Moves to next sample
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdIterator.GotoX(System.Int64)">
            <summary>
            Moves to sample at given time stamp
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdIterator.AdvanceX(System.Int64)">
            <summary>
            Moves, forward only, to sample at given time stamp
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdIterator.IsEob">
            <summary>
            Has iteration finished ?
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdTimeIterator.TimebaseFixed">
            <summary>
            Are we iterating over data with a fixed time base?
            </summary>
            <value>
            True if data samples are equidistant
            </value>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdTimeIterator.Timebase">
            <summary>
            Timebase in 100ns
            </summary>
            <remarks>
            if TimebaseFixed = false, the maximal span between 2 successive data samples is returned
            </remarks>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdTimeIterator.GetTimebaseMin(System.Int64,System.Int64)">
            <summary>
            Gets smallest timebase in given time range
            </summary>
            <returns>
            Int64.MaxValue if iterator range doesn't intersect with given range
            </returns>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdTimeIterator.Level">
            <summary>
            Level
            </summary>
            <remarks>
            if TimebaseFixed = false, the maximal level is returned
            </remarks>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdTimeIterator.NextY">
            <summary>
            Moves to next sample with a different value
            </summary>
            <returns>
            Time span between resulting sample and sample before it (negative if resulting sample is same sample Next() would move to)
            </returns>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdTimeIterator.GetValueRange(System.Int64,System.Int64,System.Single@,System.Single@)">
            <summary>
            Gets the min and max value in a given time range
            </summary>
            <param name="start">start of time range</param>
            <param name="stop">end of time range</param>
            <param name="min">minimum value</param>
            <param name="max">maximum value</param>
        </member>
        <member name="F:iba.HD.Client.Interfaces.ProductRangeInfo.Start">
            <summary>
            Absolute start stamp
            </summary>
        </member>
        <member name="F:iba.HD.Client.Interfaces.ProductRangeInfo.StartRel">
            <summary>
            Start stamp relative to product
            </summary>
        </member>
        <member name="F:iba.HD.Client.Interfaces.ProductRangeInfo.Span">
            <summary>
            Range span
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.ProductRangeInfo.Stop">
            <summary>
             Absolute stop stamp
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.ProductRangeInfo.StopRel">
            <summary>
            Stop stamp relative to current product
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdLengthIterator.LengthbaseFixed">
            <summary>
            Are we iterating over data with a fixed length base?
            </summary>
            <value>
            True if data samples are equidistant
            </value>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdLengthIterator.Lengthbase">
            <value>
            if LengthbaseFixed = false, the maximal span between 2 successive data samples is returned
            </value>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdLengthIterator.GetLengthbaseMin(System.Int64,System.Int64)">
            <summary>
            Gets smallest lengthbase in given length range
            </summary>
            <returns>
            int.MaxValue if iterator range doesn't intersect with given range
            </returns>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdLengthIterator.LStart">
            <summary>
            Length stamp of first sample
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdLengthIterator.LStop">
            <summary>
            Length stamp of last sample, including the duration it is valid
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdLengthIterator.L">
            <summary>
            Current sample length stamp
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdLengthIterator.GotoL(System.Int64)">
            <summary>
            Moves to sample at given length stamp
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdLengthIterator.AdvanceL(System.Int64)">
            <summary>
            Moves, forward only, to sample at given length stamp
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdLengthIterator.NextY(System.Int64@,System.Int64@)">
            <summary>
            Moves to next sample with a different value
            </summary>
            <param name="tSpan">
            Time span between resulting sample and sample before it (negative if resulting sample is same sample Next() would move to)
            </param>
            <param name="lSpan">
            Length span between resulting sample and sample before it (negative if resulting sample is same sample Next() would move to)
            </param>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdLengthIterator.TimebaseFixed">
            <summary>
            Are we iterating over data with a fixed time base?
            </summary>
            <value>
            True if data samples are equidistant
            </value>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdLengthIterator.Timebase">
            <summary>
            Timebase in 100ns
            </summary>
            <remarks>
            if TimebaseFixed = false, the maximal span between 2 successive data samples is returned
            </remarks>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdLengthIterator.AddGapsL(System.Collections.Generic.ICollection{System.Int64},System.Int64,System.Int64)">
            <summary>
            Adds gap length stamps within given length range to given list
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdLengthIterator.AddProductRangesL(System.Collections.Generic.ICollection{iba.HD.Client.Interfaces.ProductRangeInfo},System.Int64,System.Int64)">
            <summary>
            Adds info about product ranges touching given length range to given list
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdLengthIterator.GetValueRangeL(System.Int64,System.Int64,System.Single@,System.Single@)">
            <summary>
            Gets the min and max value in a given length range
            </summary>
            <param name="start">start of length range</param>
            <param name="stop">end of length range</param>
            <param name="min">minimum value</param>
            <param name="max">maximum value</param>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdLengthIterator.GetValueRangeX(System.Int64,System.Int64,System.Single@,System.Single@)">
            <summary>
            Gets the min and max value in a given time range
            </summary>
            <param name="start">start of time range</param>
            <param name="stop">end of time range</param>
            <param name="min">minimum value</param>
            <param name="max">maximum value</param>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdSignalTree.Control">
            <summary>
            Gets the control
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdSignalTree.BeginStateChange">
            <summary>
            Can be called before changing tree state; EndStateChange must be called afterwards
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdSignalTree.EndStateChange">
            <summary>
            Can be called after changing tree state; BeginStateChange must be called first
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdSignalTree.Mode">
            <summary>
            Gets or sets tree node mode
            </summary>
        </member>
        <member name="E:iba.HD.Client.Interfaces.IHdSignalTree.ModeChanged">
            <summary>
            Fired when mode changes
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdSignalTree.ContextOptions">
            <summary>
            Gets or sets context menu options
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdSignalTree.AggregateOptions">
            <summary>
            Get or set signal aggregate options
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdSignalTree.LogicalFilter">
            <summary>
            Gets or sets logical filter
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdSignalTree.WriteStatusFilter">
            <summary>
            Gets or sets write status filter
            </summary>
        </member>
        <member name="E:iba.HD.Client.Interfaces.IHdSignalTree.WriteStatusFilterChanged">
            <summary>
            Fired when write filter changed
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdSignalTree.StoreNameFilters">
            <summary>
            Gets or sets store name filters
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdSignalTree.StoreTypeFilter">
            <summary>
            Gets or sets store type filter
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdSignalTree.LocationNameFilter">
            <summary>
            Gets or sets location name filter
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdSignalTree.AttachedSignalFilter">
            <summary>
            Gets or sets attached signal filter
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdSignalTree.ShowAttachments">
            <summary>
            Show attached backups if there are any
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdSignalTree.AllowDrag">
            <summary>
            Allow node drag operations or not
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdSignalTree.MultiSelect">
            <summary>
            Allow multiple node selection or not
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdSignalTree.ShowCheckboxes">
            <summary>
            Show checkboxes or not
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdSignalTree.ShowAsterisks">
            <summary>
            Show asterisk nodes or not
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdSignalTree.SelectedSignalId">
            <summary>
            Gets or sets the selected signal id
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdSignalTree.ExpandAll(System.Int32)">
            <summary>
            Expands all tree nodes
            </summary>
            <param name="maxDepth">
            If negative, nodes expand untill signals are visible
            </param>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdSignalTree.CollapseAll">
            <summary>
            Collapses all tree nodes
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdSignalTree.GetSelectedSignalIds">
            <summary>
            Gets all selected signal ids
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdSignalTree.SelectSignalIds(System.String[])">
            <summary>
            Sets all selected signal ids
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdSignalTree.GetCheckedSignalIds">
            <summary>
            Gets all checked signal ids
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdSignalTree.CheckAll">
            <summary>
            Checks all signals
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdSignalTree.UncheckAll">
            <summary>
            Unchecks all signals
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdSignalTree.CheckSignalIds(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets all checked signal ids
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdSignalTree.SetComparer(System.Collections.Generic.IComparer{iba.HD.Common.HdReaderSignal})">
            <summary>
            Sets the comparer used to sort signal nodes
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdSignalTree.AddCustomNode(System.String,System.Drawing.Image)">
            <summary>
            Adds a custom node to the signal tree
            </summary>
            <param name="text">Tree node text</param>
            <param name="image">Tree node image</param>
            <returns>Tree node id</returns>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdSignalTree.ClearCustomNodes">
            <summary>
            Remove all custom nodes from the signal tree
            </summary>
        </member>
        <member name="E:iba.HD.Client.Interfaces.IHdSignalTree.SignalSelected">
            <summary>
            Fired when a signal is selected
            </summary>
        </member>
        <member name="E:iba.HD.Client.Interfaces.IHdSignalTree.SelectionChanged">
            <summary>
            Fired when selection has changed
            </summary>
        </member>
        <member name="E:iba.HD.Client.Interfaces.IHdSignalTree.CheckedChanged">
            <summary>
            Fired when node checked state has changed
            </summary>
        </member>
        <member name="E:iba.HD.Client.Interfaces.IHdSignalTree.DoubleClick">
            <summary>
            Fired when a node is double clicked
            </summary>
        </member>
        <member name="E:iba.HD.Client.Interfaces.IHdSignalTree.Drag">
            <summary>
            Fired when a node is dragged
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdSignalTree.UpdateNameMode">
            <summary>
            Updates signal names according to current name mode
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdSignalTree.UpdateLocalization">
            <summary>
            Updates tree control localization
            </summary>
        </member>
        <member name="T:iba.HD.Client.Interfaces.IHdEventManager">
            <summary>
            Manages event request for a single HD client
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdEventManager.GetStoreNames">
            <summary>
            Gets names of all event stores on the connected server
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdEventManager.GetSignalText(System.String)">
            <summary>
            Gets text information for event with given id
            </summary>
            <returns>
            Null if id is unknown
            </returns>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdEventManager.GetQueries">
            <summary>
            Gets event queries on the connected server
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdEventManager.SetQueries(System.Collections.Generic.List{iba.HD.Common.MultiEventQuery},System.Collections.Generic.List{iba.HD.Common.MultiEventQuery},System.Boolean)">
            <summary>
            Sets event queries
            </summary>
            <param name="force">
            Force if config is out of date
            </param>
            <returns>
            0 if failed; 1 if config out of date; 2 if successful
            </returns>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdEventManager.GetQueryFields(System.String)">
            <summary>
            Gets field expressions for event with given id
            </summary>
            <returns>
            Null if id is unknown
            </returns>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdEventManager.AddSubset(iba.HD.Common.EventStoreSubset,System.Action{System.String,System.Int32})">
            <summary>
            Adds event store subset to be used in requests
            </summary>
            <param name="subset">
            subset of event ids in a single store
            </param>
            <param name="callback">
            Delegate that will be called when subset id arrives.
            First parameter is store name, second parameter is subset id.
            </param>
            <remarks>
            Retrieved subset ids become invalid when reader gets disconnected
            </remarks>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdEventManager.RemoveSubset(System.Int32)">
            <summary>
            Subset must be removed if not used anymore
            </summary>
            <param name="subsetId">
            id of the subset to be removed
            </param>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdEventManager.AddLiveRequest(System.Int32,iba.HD.Common.TimeRangeUtc,System.Int32)">
            <summary>
            Adds live requests
            </summary>
            <param name="subsetId">
            Id of event subset to be used
            </param>
            <param name="range">
            Data request time range
            </param>
            <returns>
            Request id required to send request; negative if subset id is invalid
            </returns>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdEventManager.AddQueryRequest(iba.HD.Common.MultiEventQuery,System.Int32)">
            <summary>
            Adds query requests
            </summary>
            <param name="query">
            Query details
            </param>
            <returns>
            Request id required to send request
            </returns>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdEventManager.SendRequest(System.Int32,System.Action{iba.HD.Common.EventResponse})">
            <summary>
            Sends the request with given id
            </summary>
            <param name="requestId">
            id of the request to send
            </param>
            <param name="callback">
            Delegate that will be called when requested data arrives; might be called more than once for a single request
            </param>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdEventManager.CancelRequest(System.Int32)">
            <summary>
            Cancels request with given id
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdEventManager.Acknowledge(iba.HD.Common.EventAckRequest)">
            <summary>
            Acknowledges one or more events
            </summary>
            <param name="request">
            Information about the events that are being acknowledged
            </param>
            <returns>
            True, if the request has been sent to the server
            </returns>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdEventManager.Annotate(iba.HD.Common.EventNoteRequest)">
            <summary>
            Adds an annotation to an event
            </summary>
            <param name="request">
            Annotation data
            </param>
            <returns>
            True, if the request has been sent to the server
            </returns>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdEventManager.GetBlob(iba.HD.Common.EventReaderData,System.String,System.String,System.IO.Stream)">
            <summary>
            Retrieve event blob
            </summary>
            <returns>
            True upon success
            </returns>
        </member>
        <member name="T:iba.HD.Client.Interfaces.IHdTimeSynchronizer">
            <summary>
            Interface to convert between server time and local client time
            </summary>
        </member>
        <member name="T:iba.HD.Client.Interfaces.IHdReader">
            <summary>
            Interface for reading signal data from a HD server
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdReader.ShowConnectionError">
            <summary>
            Show message box when connecting to server fails
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdReader.UserLoginOptions">
            <summary>
            When should user login dialog be shown? Data entered
            into the dialog is saved (<see cref="P:iba.HD.Client.Interfaces.IHdReader.UserLoginInfo"/>).
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdReader.UserLoginInfo">
            <summary>
            User info used when connecting to server (<see cref="M:iba.HD.Client.Interfaces.IHdReader.Connect(System.String,System.Int32)"/>).
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdReader.Connect(System.String,System.Int32)">
            <summary>
            Connect to server located on given host and port
            </summary>
            <remarks>
            User info (<see cref="P:iba.HD.Client.Interfaces.IHdReader.UserLoginInfo"/>) is ignored if user management is disabled or not supported on server
            </remarks>
        </member>
        <member name="E:iba.HD.Client.Interfaces.IHdReader.ConnectionChanged">
            <summary>
            Fired when connection is established or lost
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdReader.Authenticate(System.Object)">
            <summary>
            Reader authentication
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdReader.IsConnected">
            <summary>
            Is the connection established?
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdReader.ServerHost">
            <summary>
            Connected server name
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdReader.ServerPort">
            <summary>
            Connected server port
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdReader.ConnectionError">
            <summary>
            Connection failure information
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdReader.Throughput">
            <summary>
            An indication of the rate at which data is being read
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdReader.Disconnect">
            <summary>
            Disconnects from server if currently connected
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdReader.TimeSynchronizer">
            <summary>
            Converts between server and client time
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdReader.AdvanceSpan">
            <summary>
            Cycle time span at which <see cref="E:iba.HD.Client.Interfaces.IHdReader.Advance"/> delegate is fired
            </summary>
        </member>
        <member name="E:iba.HD.Client.Interfaces.IHdReader.Advance">
            <summary>
            Fired periodically with advance time stamps for each HD store
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdReader.Stores">
            <summary>
            Gets the current signal information
            </summary>
        </member>
        <member name="E:iba.HD.Client.Interfaces.IHdReader.SignalsUpdated">
            <summary>
            Fired when signals are updated
            </summary>
        </member>
        <member name="E:iba.HD.Client.Interfaces.IHdReader.SignalDataUpdated">
            <summary>
            Fired when signal data is updated
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdReader.CreateSignalTree(System.Boolean)">
            <summary>
            Creates a signal tree
            </summary>
            <param name="searchable">
            True to add search tab to control
            </param>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdReader.GetDisplayName(System.String,iba.HD.Client.Interfaces.HdSignalNamePermissions,iba.HD.Client.Interfaces.HdSignalNamePermissions,System.Boolean)">
            <summary>
            Gets display name of signal with given id
            </summary>
            <param name="incServerName">include server part</param>
            <param name="incStoreName">include store part</param>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdReader.GetSegmentFirst(iba.HD.Common.HdSegmentRequest)">
            <summary>
            Gets first signal segment. Null if not found.
            </summary>
            <remarks>
            request.Range is ignored
            </remarks>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdReader.GetSegmentLast(iba.HD.Common.HdSegmentRequest)">
            <summary>
            Gets last signal segment. Null if not found.
            </summary>
            <remarks>
            request.Range is ignored
            </remarks>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdReader.GetSegmentRange(iba.HD.Common.HdSegmentRequest)">
            <summary>
            Gets all signal segments touching given range
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdReader.TryReadLicense(System.Int32,System.Byte@)">
            <summary>
            Read a license value from server
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdReader.AcquireLicense(System.Int32)">
            <summary>
            Acquires a license from server
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdReader.ReleaseLicense(System.Int32)">
            <summary>
            Releases a license from server
            </summary>
            <remarks>
            Acquired licenses are automatically removed when connection is closed
            </remarks>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdReader.ChannelManager">
            <summary>
            Gets the HD channel manager
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdReader.EventManager">
            <summary>
            Gets the HD event manager
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdReader.UserManager">
            <summary>
            Gets the HD user manager
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdReader.GetSupportZip">
            <summary>
            Gets support files
            </summary>
            <exception cref="T:System.Exception">
            Thrown when support files could not be retrieved
            </exception>
            <returns>
            Zip file
            </returns>
        </member>
        <member name="T:iba.HD.Client.Interfaces.IHdUserManager">
            <summary>
            HD server user management
            </summary>
            <remarks>
            Methods throw upon failure
            </remarks>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdUserManager.IsActive">
            <summary>
            Is user management active?
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdUserManager.UserType">
            <summary>
            Type of users that are managed
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdUserManager.UserVersion">
            <summary>
            Version of users that are managed
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdUserManager.LoginUser(System.String,System.String)">
            <summary>
            Log in with given credentials
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdUserManager.VerifyUser(System.String,System.String)">
            <summary>
            Verify user credentials
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdUserManager.GetCurrentUser">
            <summary>
            Get current user. Null if not logged in.
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdUserManager.GetUsers">
            <summary>
            Get all users
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdUserManager.StartEditUser">
            <summary>
            Start editing users
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdUserManager.AddUser(iba.HD.Common.HdUser,System.String)">
            <summary>
            Adds a new user
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdUserManager.EditUser(iba.HD.Common.HdUser)">
            <summary>
            Edit given user
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdUserManager.EditUserPassword(iba.HD.Common.HdUser,System.String)">
            <summary>
            Edit pasword for given user
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdUserManager.RemoveUser(iba.HD.Common.HdUser)">
            <summary>
            Remove given user
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdUserManager.StopEditUser">
            <summary>
            Stop editing users
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdUserManager.HasLayout(System.String)">
            <summary>
            Does given user have layout stored on server?
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdUserManager.GetLayout(System.Windows.Forms.IWin32Window,System.String,System.IO.Stream)">
            <summary>
            Retrieves layout for given user. Data is written to given stream.
            </summary>
            <returns>
            Whether layout has been retrieved successfully
            </returns>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdUserManager.SetLayout(System.Windows.Forms.IWin32Window,System.Collections.Generic.List{System.String},System.IO.Stream)">
            <summary>
            Store layout for given users. Data is read from given stream.
            </summary>
            <returns>
            Whether layout has been sent successfully
            </returns>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdUserManager.GetUsers(System.Windows.Forms.IWin32Window,System.IO.Stream)">
            <summary>
            Save users stored on server to given stream
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdUserManager.SetUsers(System.Windows.Forms.IWin32Window,System.IO.Stream)">
            <summary>
            Load users from given stream to server
            </summary>
        </member>
        <member name="T:iba.HD.Client.Interfaces.WriterConfigResult">
            <summary>
            Possible writer configuration results
            </summary>
        </member>
        <member name="T:iba.HD.Client.Interfaces.IHdWriterSummary">
            <summary>
            Summary returned when setting a writer configuration
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdWriterSummary.Origin">
            <summary>
            Origin this summary was created for
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdWriterSummary.StoreId">
            <summary>
            Id of store this summary was created for
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdWriterSummary.Result">
            <summary>
            Valid           -> configuration is valid
            Error           -> configuration is invalid
            Conflict        -> configuration can become valid if conflicts are solved
            CannotConnect   -> configuration is invalid because connection to server failed
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdWriterSummary.Errors">
            <summary>
            Read-only list of errors that occured
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdWriterSummary.Conflicts">
            <summary>
            Read-only list of conflicts whose solution can be altered
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdWriterSummary.Tag">
            <summary>
            Tag that can contain extra info
            </summary>
        </member>
        <member name="T:iba.HD.Client.Interfaces.OperationOrderException">
            <summary>
            Thrown when operation order is incorrect
            </summary>
        </member>
        <member name="T:iba.HD.Client.Interfaces.IHdWriterManager">
            <summary>
            Manages a set of writers
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdWriterManager.StartConfig">
            <summary>
            Starts writer configuration process
            </summary>
            <exception cref="T:iba.HD.Client.Interfaces.OperationOrderException">
            Must be first method call or follow call to "EndCreate" 
            </exception>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdWriterManager.SetConfig(iba.HD.Common.HdWriterConfig,iba.HD.Client.Interfaces.IHdWriterSummary,iba.HD.Common.HdValidatorMulti)">
            <summary>
            Sets a new writer configuration for a data origin
            </summary>
            <remarks>
            To remove an origin, don't call "SetConfig" for that origin
            </remarks>
            <param name="config">
            Store and signal config for a certain origin
            </param>
            <param name="summary">
            Offers solutions to possible conflicts. Can be null.
            </param>
            <param name="listener">
            Receives validation messages during configuration process
            </param>
            <returns>
            Configuration process summary
            </returns>
            <exception cref="T:iba.HD.Client.Interfaces.OperationOrderException">
            Must follow call to "StartConfig" or "SetConfig" 
            </exception>
            <exception cref="T:System.ArgumentException">
            settings and summary for different origin or store
            </exception>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdWriterManager.EndConfig">
            <summary>
            Ends writer configuration process
            </summary>
            <returns>
            Summaries for origins that have beem removed
            </returns>
            <exception cref="T:iba.HD.Client.Interfaces.OperationOrderException">
            Must follow call to "StartConfig" or "SetConfig"
            </exception>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdWriterManager.StartCreate">
            <summary>
            Starts writer creation process. All
            previously created writers will be disposed.
            </summary>
            <exception cref="T:iba.HD.Client.Interfaces.OperationOrderException">
            Must follow call to "EndConfig"
            </exception>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdWriterManager.CreateWriter(iba.HD.Client.Interfaces.IHdWriterSummary,System.Boolean,iba.HD.Common.HdValidatorMulti)">
            <summary>
            Creates a writer
            </summary>
            <param name="summary">
            Configuration summary for the orgin
            whose writer is being created. Cannot be null.
            </param>
            <param name="activate">
            True to activate the newly set configuration. False to
            discard the new - and thus keep the old - configuration.
            </param>
            <param name="listener">
            Receives validation messages during configuration process
            </param>
            <returns>
            A writer whose Status might be 'Open' or 'Error'; Null,
            if activate == true/false and the origin represented by
            the given summary has been deleted/added
            </returns>
            <exception cref="T:System.ArgumentException">
            summary is unknown
            </exception>
            <exception cref="T:iba.HD.Client.Interfaces.OperationOrderException">
            Must follow call to "StartCreate" or "CreateWriter"
            </exception>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdWriterManager.EndCreate">
            <summary>
            Ends the writer creation process
            </summary>
            <exception cref="T:System.InvalidOperationException">
            CreateWriter has not been called for one of the (new or old) origins
            </exception>
            <exception cref="T:iba.HD.Client.Interfaces.OperationOrderException">
            Must follow call to "StartCreate" or "CreateWriter"
            </exception>
        </member>
        <member name="T:iba.HD.Client.Interfaces.HdWriterStatus">
            <summary>
            The status a writer can be in
            </summary>
        </member>
        <member name="T:iba.HD.Client.Interfaces.IHdWriter">
            <summary>
            Interface for writing signal data to a HD server store
            </summary>
        </member>
        <member name="E:iba.HD.Client.Interfaces.IHdWriter.StatusChanged">
            <summary>
            Fired when the writer status has changed
            </summary>
            <remarks>
            Make sure GUI thread is invoked when attached event handlers change GUI components
            </remarks>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdWriter.Status">
            <summary>
            Status the writer is in
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdWriter.ErrorStatusMessage">
            <summary>
            Provides information about if the status is set to HdWriterStatus.Error
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdWriter.WriteVersion">
            <summary>
            Write data version information
            </summary>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdWriter.Write(iba.HD.Common.HdWriterData)">
            <summary>
            Writes signal data to the store
            </summary>
            <param name="data">
            Data to be written
            </param>
            <returns>
            Server buffer fill percentage
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            Writer has been disposed
            </exception>
        </member>
        <member name="M:iba.HD.Client.Interfaces.IHdWriter.Reconnect">
            <summary>
            Tries to reconnect and updates status upon success
            </summary>
        </member>
        <member name="P:iba.HD.Client.Interfaces.IHdWriter.Throughput">
            <summary>
            An indication of the rate at which data is being written
            </summary>
        </member>
    </members>
</doc>
