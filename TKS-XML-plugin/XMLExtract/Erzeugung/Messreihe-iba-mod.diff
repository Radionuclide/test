diff -u3b D:/Projects/Gent/ibaXmlExtract/xmlplugin.git/TKS-XML-plugin/XMLExtract/Erzeugung/Messreihe-generated.cs D:/Projects/Gent/ibaXmlExtract/xmlplugin.git/TKS-XML-plugin/XMLExtract/Erzeugung/Messreihe.cs
--- D:/Projects/Gent/ibaXmlExtract/xmlplugin.git/TKS-XML-plugin/XMLExtract/Erzeugung/Messreihe-generated.cs	2021-09-16 10:59:26.083451500 +0200
+++ D:/Projects/Gent/ibaXmlExtract/xmlplugin.git/TKS-XML-plugin/XMLExtract/Erzeugung/Messreihe.cs	2021-10-01 11:31:42.309044900 +0200
@@ -24,6 +24,8 @@
     [System.Xml.Serialization.XmlRootAttribute("Erzeugung", Namespace="http://www.thyssen.com/xml/schema/qbic", IsNullable=false)]
     public partial class ErzeugungType
     {
+        [System.Xml.Serialization.XmlAttributeAttribute("schemaLocation", Namespace = System.Xml.Schema.XmlSchema.InstanceNamespace)]
+        public string xsiSchemaLocation = "http://www.thyssen.com/xml/schema/qbic http://www-eai/schema/qbic/Messung/REL-2_6_1/Messreihe.xsd";
         
         public MaterialHeaderType MaterialHeader { get; set; }
         [System.Xml.Serialization.XmlElementAttribute("Messung")]
@@ -39,6 +41,12 @@
             this.Messung = new List<MessungType>();
             this.MaterialHeader = new MaterialHeaderType();
         }
+
+        public bool ShouldSerializeEinzelwerte()
+        {
+            return (Einzelwerte.Einzelwert.Count > 0);
+        }
+
     }
     
     [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.6.0.20097")]
@@ -49,53 +57,16 @@
     public partial class MaterialHeaderType
     {
         
-        private object itemField;
-        
-        private System.Nullable<StandortType> standortField;
-        
         private System.Nullable<MaterialArtType> materialArtField;
         
-        [System.Xml.Serialization.XmlElementAttribute("LokalerIdent", typeof(string))]
-        [System.Xml.Serialization.XmlElementAttribute("TKSIdent", typeof(ulong))]
-        public object Item { get; set; }
+        public string LokalerIdent { get; set; }
+
+        public string TKSIdent { get; set; }
         
         /// <summary>
-        /// BO, DO, DU, SI, SA
+        /// BO, DO, DU, SI, SA oder Anderer
         /// </summary>
-        public StandortType Standort
-        {
-            get
-            {
-                if (this.standortField.HasValue)
-                {
-                    return this.standortField.Value;
-                }
-                else
-                {
-                    return default(StandortType);
-                }
-            }
-            set
-            {
-                this.standortField = value;
-            }
-        }
-        
-        [System.Xml.Serialization.XmlIgnoreAttribute()]
-        public bool StandortSpecified
-        {
-            get
-            {
-                return this.standortField.HasValue;
-            }
-            set
-            {
-                if (value==false)
-                {
-                    this.standortField = null;
-                }
-            }
-        }
+        public string Standort { get; set; }
         
         /// <summary>
         /// Nur DU:  BR WB KB VZ BB PK
@@ -137,26 +108,6 @@
     }
     
     /// <summary>
-    /// Gueltige TKS-Standorte.
-    /// </summary>
-    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.6.0.20097")]
-    [System.SerializableAttribute()]
-    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.thyssen.com/xml/schema/qbic")]
-    public enum StandortType
-    {
-        
-        BO,
-        
-        DO,
-        
-        DU,
-        
-        SI,
-        
-        SA,
-    }
-    
-    /// <summary>
     /// Zusaetzliche Kennzeichnung von Duisburger Material.
     /// </summary>
     [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.6.0.20097")]
@@ -204,48 +155,15 @@
     public partial class EinzelwertType
     {
         
-        private System.Nullable<EinheitEnum> einheitField;
-        
         /// <summary>
         /// z.B. TemperaturZinkbad
         /// </summary>
         public string Bezeichner { get; set; }
         public string Wert { get; set; }
         
-        public EinheitEnum Einheit
-        {
-            get
-            {
-                if (this.einheitField.HasValue)
-                {
-                    return this.einheitField.Value;
-                }
-                else
-                {
-                    return default(EinheitEnum);
-                }
-            }
-            set
-            {
-                this.einheitField = value;
-            }
-        }
+        public string Einheit { get; set; }
         
-        [System.Xml.Serialization.XmlIgnoreAttribute()]
-        public bool EinheitSpecified
-        {
-            get
-            {
-                return this.einheitField.HasValue;
-            }
-            set
-            {
-                if (value==false)
-                {
-                    this.einheitField = null;
-                }
-            }
-        }
+        public string EinheitLokal { get; set; }
     }
     
     [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.6.0.20097")]
@@ -260,6 +178,9 @@
         
         gradC,
         
+        /// <summary>
+        /// m/min
+        /// </summary>
         [System.Xml.Serialization.XmlEnumAttribute("m/min")]
         mmin,
         
@@ -269,6 +190,9 @@
         
         V,
         
+        /// <summary>
+        /// g/qm
+        /// </summary>
         [System.Xml.Serialization.XmlEnumAttribute("g/qm")]
         gqm,
         
@@ -280,6 +204,9 @@
         
         grad,
         
+        /// <summary>
+        /// Keine/1
+        /// </summary>
         [System.Xml.Serialization.XmlEnumAttribute("Keine/1")]
         Keine1,
         
@@ -289,12 +216,21 @@
         
         Test,
         
+        /// <summary>
+        /// As/qm
+        /// </summary>
         [System.Xml.Serialization.XmlEnumAttribute("As/qm")]
         Asqm,
         
+        /// <summary>
+        /// m/qs
+        /// </summary>
         [System.Xml.Serialization.XmlEnumAttribute("m/qs")]
         mqs,
         
+        /// <summary>
+        /// U/min
+        /// </summary>
         [System.Xml.Serialization.XmlEnumAttribute("U/min")]
         Umin,
         
@@ -304,27 +240,51 @@
         
         Hz,
         
+        /// <summary>
+        /// gradC/s
+        /// </summary>
         [System.Xml.Serialization.XmlEnumAttribute("gradC/s")]
         gradCs,
         
+        /// <summary>
+        /// m3/s
+        /// </summary>
         [System.Xml.Serialization.XmlEnumAttribute("m3/s")]
         m3s,
         
+        /// <summary>
+        /// m3/h
+        /// </summary>
         [System.Xml.Serialization.XmlEnumAttribute("m3/h")]
         m3h,
         
+        /// <summary>
+        /// t/h
+        /// </summary>
         [System.Xml.Serialization.XmlEnumAttribute("t/h")]
         th,
         
+        /// <summary>
+        /// mikroS/cm
+        /// </summary>
         [System.Xml.Serialization.XmlEnumAttribute("mikroS/cm")]
         mikroScm,
         
+        /// <summary>
+        /// N/m2
+        /// </summary>
         [System.Xml.Serialization.XmlEnumAttribute("N/m2")]
         Nm2,
         
+        /// <summary>
+        /// m/s
+        /// </summary>
         [System.Xml.Serialization.XmlEnumAttribute("m/s")]
         ms,
         
+        /// <summary>
+        /// A/qm
+        /// </summary>
         [System.Xml.Serialization.XmlEnumAttribute("A/qm")]
         Aqm,
         
@@ -336,11 +296,17 @@
         
         m3,
         
+        /// <summary>
+        /// ml/min
+        /// </summary>
         [System.Xml.Serialization.XmlEnumAttribute("ml/min")]
         mlmin,
         
         lgbar,
         
+        /// <summary>
+        /// g/l
+        /// </summary>
         [System.Xml.Serialization.XmlEnumAttribute("g/l")]
         gl,
         
@@ -365,9 +331,17 @@
         /// z.B. BEFB02
         /// </summary>
         public string Aggregat { get; set; }
+
+        [XmlIgnore]
         public System.DateTime Messzeitpunkt { get; set; }
-        [System.Xml.Serialization.XmlIgnoreAttribute()]
-        public bool MesszeitpunktSpecified { get; set; }
+
+        [XmlElement("Messzeitpunkt")]
+        public string MesszeitpunktString
+        {
+            get { return this.Messzeitpunkt.ToString("yyyy-MM-dd'T'HH:mm:sszzz"); }
+            set { this.Messzeitpunkt = DateTime.ParseExact(value, "yyyy-MM-dd'T'HH:mm:sszzz", System.Globalization.CultureInfo.CurrentCulture); }
+        }
+
         [System.Xml.Serialization.XmlElementAttribute("Einzelwert")]
         public List<EinzelwertType> Einzelwert { get; set; }
         
@@ -387,36 +361,59 @@
     [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.thyssen.com/xml/schema/qbic")]
     public partial class Raster1DType
     {
-        
+        public Raster1DType()
+        {
+            this.WerteList = new List<float>();
+        }        
         /// <summary>
         /// Anz. der Werte, wird berechnet wenn fehlend.
         /// </summary>
         public int AnzahlX { get; set; }
-        [System.Xml.Serialization.XmlIgnoreAttribute()]
-        public bool AnzahlXSpecified { get; set; }
+        [XmlIgnore]
+        public bool AnzahlXSpecified => AnzahlX > 0;
         /// <summary>
         /// Schrittlaenge zwischen zwei Messpunkten, in der spez. x-Richtung und Dimension (Sekunde oder Meter)
         /// </summary>
-        public double SegmentgroesseX { get; set; }
+        public float SegmentgroesseX { get; set; }
         /// <summary>
         /// Darf weggelassen werden, dann wird 0 angenommen.
         /// </summary>
-        public double SegmentOffsetX { get; set; }
-        [System.Xml.Serialization.XmlIgnoreAttribute()]
-        public bool SegmentOffsetXSpecified { get; set; }
+        public float SegmentOffsetX { get; set; }
+        [XmlIgnore]
+        public bool SegmentOffsetXSpecified => SegmentOffsetX != 0.0;
         /// <summary>
         /// Fehlt, wenn y-z-unabhaengig oder 0
         /// </summary>
-        public double SegmentOffsetY { get; set; }
-        [System.Xml.Serialization.XmlIgnoreAttribute()]
-        public bool SegmentOffsetYSpecified { get; set; }
+        public float SegmentOffsetY { get; set; }
+        [XmlIgnore]
+        public bool SegmentOffsetYSpecified => SegmentOffsetY != 0.0;
         /// <summary>
         /// Fehlt wenn z-unabhaengig oder 0
         /// </summary>
-        public double SegmentOffsetZ { get; set; }
-        [System.Xml.Serialization.XmlIgnoreAttribute()]
-        public bool SegmentOffsetZSpecified { get; set; }
-        public string WerteX { get; set; }
+        public float SegmentOffsetZ { get; set; }
+        [XmlIgnore]
+        public bool SegmentOffsetZSpecified => SegmentOffsetZ != 0.0;
+
+        [EditorBrowsable(EditorBrowsableState.Never)]
+        public string WerteX
+        {
+            get
+            {
+                var stringItems = WerteList.ConvertAll(w => XmlConvert.ToString(w));
+                return String.Join(" ", stringItems.ToArray());
+            }
+            set
+            {
+                WerteList.Clear();
+                foreach (var item in value.Split(" ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries))
+                {
+                    WerteList.Add(XmlConvert.ToSingle(item));
+                }
+            }
+        }
+
+        [XmlIgnore]
+        public List<float> WerteList { get; set; }
     }
     
     [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.6.0.20097")]
@@ -432,8 +429,6 @@
         public double Avg { get; set; }
         public double StdDev { get; set; }
         public double Median { get; set; }
-        [System.Xml.Serialization.XmlIgnoreAttribute()]
-        public bool MedianSpecified { get; set; }
     }
     
     [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.6.0.20097")]
@@ -444,19 +439,16 @@
     public partial class SpurType
     {
         
-        private object itemField;
-        
         private System.Nullable<WerteTypeEnum> typField;
         
-        private BezugDimensionEnum dimensionXField;
+        public string Einheit { get; set; }
+
+        public string EinheitLokal { get; set; }
         
         private System.Nullable<BezugDimensionEnum> dimensionYField;
         
         private System.Nullable<BezugDimensionEnum> dimensionZField;
         
-        [System.Xml.Serialization.XmlElementAttribute("Einheit", typeof(EinheitEnum))]
-        [System.Xml.Serialization.XmlElementAttribute("EinheitLokal", typeof(string))]
-        public object Item { get; set; }
         /// <summary>
         /// Name der Messreihe im statischen Modell
         /// </summary>
@@ -465,6 +457,15 @@
         /// Darf weggelassen werden; dann werden die Werte berechnet.
         /// </summary>
         public StatistikType Statistik { get; set; }
+        // added by iba
+        [EditorBrowsable(EditorBrowsableState.Never)]
+        public bool ShouldSerializeStatistik()
+        {
+            if (this.Statistik == null)
+                return false;
+
+            return (Statistik.Avg + Statistik.Max + Statistik.Min + Statistik.StdDev + Statistik.Median) != 0;
+        }
         /// <summary>
         /// Falls Werte relativ sind, kann hier der Bezugswert angegeben werden. Falls die Werte absolut sind, ist der Bezugswert 0.
         /// </summary>
@@ -473,15 +474,12 @@
         /// <summary>
         /// Darf weggelassen werden; dann wird true angenommen.
         /// </summary>
+        [System.ComponentModel.DefaultValueAttribute(true)]
         public bool isAbsolut { get; set; }
-        [System.Xml.Serialization.XmlIgnoreAttribute()]
-        public bool isAbsolutSpecified { get; set; }
         /// <summary>
         /// Richtung der x-Achse (oder Dimension Zeit, Windungen)
         /// </summary>
         public BezugDimensionEnum DimensionX { get; set; }
-        [System.Xml.Serialization.XmlElementAttribute("Raster1D")]
-        public List<Raster1DType> Raster1D { get; set; }
         
         /// <summary>
         /// SpurType class constructor
@@ -490,7 +488,9 @@
         {
             this.Raster1D = new List<Raster1DType>();
             this.Statistik = new StatistikType();
+            this.DimensionX = BezugDimensionEnum.Laenge;
             this.Bezugswert = 0;
+            this.isAbsolut = true;
         }
         
         /// <summary>
@@ -606,6 +606,10 @@
                 }
             }
         }
+        
+        [System.Xml.Serialization.XmlElementAttribute("Raster1D")]
+        public List<Raster1DType> Raster1D { get; set; }
+
     }
     
     [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.6.0.20097")]
@@ -652,8 +656,6 @@
     public partial class MessungType
     {
         
-        private BandlaufrichtungEnum bandlaufrichtungField;
-        
         public string IDMessgeraet { get; set; }
         /// <summary>
         /// z.B. BEFB02
@@ -665,15 +667,23 @@
         /// z.B. DICKE__AL
         /// </summary>
         public string Gruppe { get; set; }
+        
+        [XmlIgnore]
         public System.DateTime Messzeitpunkt { get; set; }
+
+        [XmlElement("Messzeitpunkt")]
+        public string MesszeitpunktString
+        {
+            get { return this.Messzeitpunkt.ToString("yyyy-MM-dd'T'HH:mm:sszzz"); }
+            set { this.Messzeitpunkt = DateTime.ParseExact(value, "yyyy-MM-dd'T'HH:mm:sszzz", System.Globalization.CultureInfo.CurrentCulture); }
+        }
+        
         [System.Xml.Serialization.XmlElementAttribute("Spur")]
         public List<SpurType> Spur { get; set; }
         /// <summary>
         /// Voraussichtlich wird keine weitere Messung zu diesem Arbeitsgangdurchsatz folgen.
         /// </summary>
         public bool LetzteMsgAmDurchsatz { get; set; }
-        [System.Xml.Serialization.XmlIgnoreAttribute()]
-        public bool LetzteMsgAmDurchsatzSpecified { get; set; }
         
         /// <summary>
         /// MessungType class constructor
